
sbus_2_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d0  080083d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080083d0  080083d0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083d0  080083d0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080083d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000007c  08008454  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08008454  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8fd  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002259  00000000  00000000  0002f9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00031c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00032c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018796  00000000  00000000  00033c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120c0  00000000  00000000  0004c3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e4c1  00000000  00000000  0005e48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec94f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  000ec9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d54 	.word	0x08007d54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08007d54 	.word	0x08007d54

0800014c <parse_Motion>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void parse_Motion()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// As a distance from center stick point
	// wrong data protection
	if (failsafe_status != SBUS_SIGNAL_OK || packetCounter == 0) {
 8000150:	4b8b      	ldr	r3, [pc, #556]	; (8000380 <parse_Motion+0x234>)
 8000152:	881b      	ldrh	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d103      	bne.n	8000160 <parse_Motion+0x14>
 8000158:	4b8a      	ldr	r3, [pc, #552]	; (8000384 <parse_Motion+0x238>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d106      	bne.n	800016e <parse_Motion+0x22>
			speed = 0;
 8000160:	4b89      	ldr	r3, [pc, #548]	; (8000388 <parse_Motion+0x23c>)
 8000162:	2200      	movs	r2, #0
 8000164:	601a      	str	r2, [r3, #0]
			rotary = 0;
 8000166:	4b89      	ldr	r3, [pc, #548]	; (800038c <parse_Motion+0x240>)
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
 800016c:	e063      	b.n	8000236 <parse_Motion+0xea>

		} else {

			speed = ((speed * 5) + (channels[0].value - channels[0].trim)*3)/8;
 800016e:	4b86      	ldr	r3, [pc, #536]	; (8000388 <parse_Motion+0x23c>)
 8000170:	681a      	ldr	r2, [r3, #0]
 8000172:	4613      	mov	r3, r2
 8000174:	009b      	lsls	r3, r3, #2
 8000176:	1899      	adds	r1, r3, r2
 8000178:	4b85      	ldr	r3, [pc, #532]	; (8000390 <parse_Motion+0x244>)
 800017a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800017e:	461a      	mov	r2, r3
 8000180:	4b83      	ldr	r3, [pc, #524]	; (8000390 <parse_Motion+0x244>)
 8000182:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000186:	1ad2      	subs	r2, r2, r3
 8000188:	4613      	mov	r3, r2
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	4413      	add	r3, r2
 800018e:	440b      	add	r3, r1
 8000190:	2b00      	cmp	r3, #0
 8000192:	da00      	bge.n	8000196 <parse_Motion+0x4a>
 8000194:	3307      	adds	r3, #7
 8000196:	10db      	asrs	r3, r3, #3
 8000198:	461a      	mov	r2, r3
 800019a:	4b7b      	ldr	r3, [pc, #492]	; (8000388 <parse_Motion+0x23c>)
 800019c:	601a      	str	r2, [r3, #0]
			if (abs(speed) < 32) {
 800019e:	4b7a      	ldr	r3, [pc, #488]	; (8000388 <parse_Motion+0x23c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	f113 0f1f 	cmn.w	r3, #31
 80001a6:	db07      	blt.n	80001b8 <parse_Motion+0x6c>
 80001a8:	4b77      	ldr	r3, [pc, #476]	; (8000388 <parse_Motion+0x23c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2b1f      	cmp	r3, #31
 80001ae:	dc03      	bgt.n	80001b8 <parse_Motion+0x6c>
				speed = 0;
 80001b0:	4b75      	ldr	r3, [pc, #468]	; (8000388 <parse_Motion+0x23c>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	e00c      	b.n	80001d2 <parse_Motion+0x86>
			} else {
				speed = (speed > 0)?(speed - 32):(speed + 32);
 80001b8:	4b73      	ldr	r3, [pc, #460]	; (8000388 <parse_Motion+0x23c>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	dd03      	ble.n	80001c8 <parse_Motion+0x7c>
 80001c0:	4b71      	ldr	r3, [pc, #452]	; (8000388 <parse_Motion+0x23c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	3b20      	subs	r3, #32
 80001c6:	e002      	b.n	80001ce <parse_Motion+0x82>
 80001c8:	4b6f      	ldr	r3, [pc, #444]	; (8000388 <parse_Motion+0x23c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	3320      	adds	r3, #32
 80001ce:	4a6e      	ldr	r2, [pc, #440]	; (8000388 <parse_Motion+0x23c>)
 80001d0:	6013      	str	r3, [r2, #0]
			}
			rotary = ((rotary * 5) + (channels[1].value - channels[1].trim)*3)/8;
 80001d2:	4b6e      	ldr	r3, [pc, #440]	; (800038c <parse_Motion+0x240>)
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	4613      	mov	r3, r2
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	1899      	adds	r1, r3, r2
 80001dc:	4b6c      	ldr	r3, [pc, #432]	; (8000390 <parse_Motion+0x244>)
 80001de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b6a      	ldr	r3, [pc, #424]	; (8000390 <parse_Motion+0x244>)
 80001e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80001ea:	1ad2      	subs	r2, r2, r3
 80001ec:	4613      	mov	r3, r2
 80001ee:	005b      	lsls	r3, r3, #1
 80001f0:	4413      	add	r3, r2
 80001f2:	440b      	add	r3, r1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	da00      	bge.n	80001fa <parse_Motion+0xae>
 80001f8:	3307      	adds	r3, #7
 80001fa:	10db      	asrs	r3, r3, #3
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b63      	ldr	r3, [pc, #396]	; (800038c <parse_Motion+0x240>)
 8000200:	601a      	str	r2, [r3, #0]
			if (abs(rotary) < 32) {
 8000202:	4b62      	ldr	r3, [pc, #392]	; (800038c <parse_Motion+0x240>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f113 0f1f 	cmn.w	r3, #31
 800020a:	db07      	blt.n	800021c <parse_Motion+0xd0>
 800020c:	4b5f      	ldr	r3, [pc, #380]	; (800038c <parse_Motion+0x240>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b1f      	cmp	r3, #31
 8000212:	dc03      	bgt.n	800021c <parse_Motion+0xd0>
				rotary = 0;
 8000214:	4b5d      	ldr	r3, [pc, #372]	; (800038c <parse_Motion+0x240>)
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	e00c      	b.n	8000236 <parse_Motion+0xea>
						} else {
							rotary = (rotary > 0)?(rotary - 32):(rotary + 32);
 800021c:	4b5b      	ldr	r3, [pc, #364]	; (800038c <parse_Motion+0x240>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b00      	cmp	r3, #0
 8000222:	dd03      	ble.n	800022c <parse_Motion+0xe0>
 8000224:	4b59      	ldr	r3, [pc, #356]	; (800038c <parse_Motion+0x240>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3b20      	subs	r3, #32
 800022a:	e002      	b.n	8000232 <parse_Motion+0xe6>
 800022c:	4b57      	ldr	r3, [pc, #348]	; (800038c <parse_Motion+0x240>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	3320      	adds	r3, #32
 8000232:	4a56      	ldr	r2, [pc, #344]	; (800038c <parse_Motion+0x240>)
 8000234:	6013      	str	r3, [r2, #0]
						}
		}
    //mixes to gears

	left = (speed*2+rotary)*10/8;
 8000236:	4b54      	ldr	r3, [pc, #336]	; (8000388 <parse_Motion+0x23c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	005a      	lsls	r2, r3, #1
 800023c:	4b53      	ldr	r3, [pc, #332]	; (800038c <parse_Motion+0x240>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	441a      	add	r2, r3
 8000242:	4613      	mov	r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	4413      	add	r3, r2
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	2b00      	cmp	r3, #0
 800024c:	da00      	bge.n	8000250 <parse_Motion+0x104>
 800024e:	3307      	adds	r3, #7
 8000250:	10db      	asrs	r3, r3, #3
 8000252:	461a      	mov	r2, r3
 8000254:	4b4f      	ldr	r3, [pc, #316]	; (8000394 <parse_Motion+0x248>)
 8000256:	601a      	str	r2, [r3, #0]
	right = (speed*2-rotary)*10/8;
 8000258:	4b4b      	ldr	r3, [pc, #300]	; (8000388 <parse_Motion+0x23c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	005a      	lsls	r2, r3, #1
 800025e:	4b4b      	ldr	r3, [pc, #300]	; (800038c <parse_Motion+0x240>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	1ad2      	subs	r2, r2, r3
 8000264:	4613      	mov	r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	4413      	add	r3, r2
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	da00      	bge.n	8000272 <parse_Motion+0x126>
 8000270:	3307      	adds	r3, #7
 8000272:	10db      	asrs	r3, r3, #3
 8000274:	461a      	mov	r2, r3
 8000276:	4b48      	ldr	r3, [pc, #288]	; (8000398 <parse_Motion+0x24c>)
 8000278:	601a      	str	r2, [r3, #0]
	// make config for direction
	HAL_GPIO_WritePin(EN_LEFT_GPIO_Port, EN_LEFT_Pin, !(abs(left) > 50 || abs(right) > 50) && failsafe_status == SBUS_SIGNAL_OK);
 800027a:	4b46      	ldr	r3, [pc, #280]	; (8000394 <parse_Motion+0x248>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8000282:	db12      	blt.n	80002aa <parse_Motion+0x15e>
 8000284:	4b43      	ldr	r3, [pc, #268]	; (8000394 <parse_Motion+0x248>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b32      	cmp	r3, #50	; 0x32
 800028a:	dc0e      	bgt.n	80002aa <parse_Motion+0x15e>
 800028c:	4b42      	ldr	r3, [pc, #264]	; (8000398 <parse_Motion+0x24c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8000294:	db09      	blt.n	80002aa <parse_Motion+0x15e>
 8000296:	4b40      	ldr	r3, [pc, #256]	; (8000398 <parse_Motion+0x24c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b32      	cmp	r3, #50	; 0x32
 800029c:	dc05      	bgt.n	80002aa <parse_Motion+0x15e>
 800029e:	4b38      	ldr	r3, [pc, #224]	; (8000380 <parse_Motion+0x234>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d101      	bne.n	80002aa <parse_Motion+0x15e>
 80002a6:	2301      	movs	r3, #1
 80002a8:	e000      	b.n	80002ac <parse_Motion+0x160>
 80002aa:	2300      	movs	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	2140      	movs	r1, #64	; 0x40
 80002b2:	483a      	ldr	r0, [pc, #232]	; (800039c <parse_Motion+0x250>)
 80002b4:	f002 faa2 	bl	80027fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_RIGHT_GPIO_Port, EN_RIGHT_Pin, !(abs(left) > 50 || abs(right) > 50) && failsafe_status == SBUS_SIGNAL_OK);
 80002b8:	4b36      	ldr	r3, [pc, #216]	; (8000394 <parse_Motion+0x248>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f113 0f32 	cmn.w	r3, #50	; 0x32
 80002c0:	db12      	blt.n	80002e8 <parse_Motion+0x19c>
 80002c2:	4b34      	ldr	r3, [pc, #208]	; (8000394 <parse_Motion+0x248>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b32      	cmp	r3, #50	; 0x32
 80002c8:	dc0e      	bgt.n	80002e8 <parse_Motion+0x19c>
 80002ca:	4b33      	ldr	r3, [pc, #204]	; (8000398 <parse_Motion+0x24c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f113 0f32 	cmn.w	r3, #50	; 0x32
 80002d2:	db09      	blt.n	80002e8 <parse_Motion+0x19c>
 80002d4:	4b30      	ldr	r3, [pc, #192]	; (8000398 <parse_Motion+0x24c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b32      	cmp	r3, #50	; 0x32
 80002da:	dc05      	bgt.n	80002e8 <parse_Motion+0x19c>
 80002dc:	4b28      	ldr	r3, [pc, #160]	; (8000380 <parse_Motion+0x234>)
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d101      	bne.n	80002e8 <parse_Motion+0x19c>
 80002e4:	2301      	movs	r3, #1
 80002e6:	e000      	b.n	80002ea <parse_Motion+0x19e>
 80002e8:	2300      	movs	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	461a      	mov	r2, r3
 80002ee:	2102      	movs	r1, #2
 80002f0:	482a      	ldr	r0, [pc, #168]	; (800039c <parse_Motion+0x250>)
 80002f2:	f002 fa83 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR_LEFT_GPIO_Port, DIR_LEFT_Pin, left > 0);
 80002f6:	4b27      	ldr	r3, [pc, #156]	; (8000394 <parse_Motion+0x248>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bfcc      	ite	gt
 80002fe:	2301      	movgt	r3, #1
 8000300:	2300      	movle	r3, #0
 8000302:	b2db      	uxtb	r3, r3
 8000304:	461a      	mov	r2, r3
 8000306:	2120      	movs	r1, #32
 8000308:	4824      	ldr	r0, [pc, #144]	; (800039c <parse_Motion+0x250>)
 800030a:	f002 fa77 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR_RIGHT_GPIO_Port, DIR_RIGHT_Pin, right > 0);
 800030e:	4b22      	ldr	r3, [pc, #136]	; (8000398 <parse_Motion+0x24c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	bfcc      	ite	gt
 8000316:	2301      	movgt	r3, #1
 8000318:	2300      	movle	r3, #0
 800031a:	b2db      	uxtb	r3, r3
 800031c:	461a      	mov	r2, r3
 800031e:	2110      	movs	r1, #16
 8000320:	481e      	ldr	r0, [pc, #120]	; (800039c <parse_Motion+0x250>)
 8000322:	f002 fa6b 	bl	80027fc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000326:	2108      	movs	r1, #8
 8000328:	481d      	ldr	r0, [pc, #116]	; (80003a0 <parse_Motion+0x254>)
 800032a:	f005 fbc5 	bl	8005ab8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800032e:	210c      	movs	r1, #12
 8000330:	481b      	ldr	r0, [pc, #108]	; (80003a0 <parse_Motion+0x254>)
 8000332:	f005 fbc1 	bl	8005ab8 <HAL_TIM_PWM_Stop>

	TIM2->CCR4 = (abs(left) > 950)?(950):(abs(left));
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <parse_Motion+0x248>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	bfb8      	it	lt
 800033e:	425b      	neglt	r3, r3
 8000340:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000344:	429a      	cmp	r2, r3
 8000346:	bfa8      	it	ge
 8000348:	461a      	movge	r2, r3
 800034a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034e:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = (abs(right) > 950)?(950):(abs(right));
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <parse_Motion+0x24c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	bfb8      	it	lt
 8000358:	425b      	neglt	r3, r3
 800035a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800035e:	429a      	cmp	r2, r3
 8000360:	bfa8      	it	ge
 8000362:	461a      	movge	r2, r3
 8000364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000368:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800036a:	2108      	movs	r1, #8
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <parse_Motion+0x254>)
 800036e:	f005 fb01 	bl	8005974 <HAL_TIM_PWM_Start>
	  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000372:	210c      	movs	r1, #12
 8000374:	480a      	ldr	r0, [pc, #40]	; (80003a0 <parse_Motion+0x254>)
 8000376:	f005 fafd 	bl	8005974 <HAL_TIM_PWM_Start>

//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, abs(right) > 1000)? (1000):(abs(right));


}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000300 	.word	0x20000300
 8000384:	20000344 	.word	0x20000344
 8000388:	20000334 	.word	0x20000334
 800038c:	20000338 	.word	0x20000338
 8000390:	200002b8 	.word	0x200002b8
 8000394:	2000033c 	.word	0x2000033c
 8000398:	20000340 	.word	0x20000340
 800039c:	40010800 	.word	0x40010800
 80003a0:	20000130 	.word	0x20000130

080003a4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b0:	4814      	ldr	r0, [pc, #80]	; (8000404 <HAL_UART_RxCpltCallback+0x60>)
 80003b2:	f002 fa3b 	bl	800282c <HAL_GPIO_TogglePin>

	if (buf_in[0] == 0x0F && buf_in[24] == 0x00) {
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <HAL_UART_RxCpltCallback+0x64>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b0f      	cmp	r3, #15
 80003bc:	f040 8178 	bne.w	80006b0 <HAL_UART_RxCpltCallback+0x30c>
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <HAL_UART_RxCpltCallback+0x64>)
 80003c2:	7e1b      	ldrb	r3, [r3, #24]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	f040 8173 	bne.w	80006b0 <HAL_UART_RxCpltCallback+0x30c>
		channels[0].value = (((buf_in[2] & 0b00000111) << 8) | (buf_in[1])) & 0x07FF;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <HAL_UART_RxCpltCallback+0x64>)
 80003cc:	789b      	ldrb	r3, [r3, #2]
 80003ce:	021b      	lsls	r3, r3, #8
 80003d0:	b21b      	sxth	r3, r3
 80003d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80003d6:	b21a      	sxth	r2, r3
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <HAL_UART_RxCpltCallback+0x64>)
 80003da:	785b      	ldrb	r3, [r3, #1]
 80003dc:	b21b      	sxth	r3, r3
 80003de:	4313      	orrs	r3, r2
 80003e0:	b21b      	sxth	r3, r3
 80003e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80003e6:	b21a      	sxth	r2, r3
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <HAL_UART_RxCpltCallback+0x68>)
 80003ea:	801a      	strh	r2, [r3, #0]
		channels[0].value+= (channels[0].value < 992)?(128):(0);
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <HAL_UART_RxCpltCallback+0x68>)
 80003ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	4a05      	ldr	r2, [pc, #20]	; (800040c <HAL_UART_RxCpltCallback+0x68>)
 80003f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80003fa:	f5b2 7f78 	cmp.w	r2, #992	; 0x3e0
 80003fe:	da07      	bge.n	8000410 <HAL_UART_RxCpltCallback+0x6c>
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	e006      	b.n	8000412 <HAL_UART_RxCpltCallback+0x6e>
 8000404:	40011000 	.word	0x40011000
 8000408:	20000304 	.word	0x20000304
 800040c:	200002b8 	.word	0x200002b8
 8000410:	2200      	movs	r2, #0
 8000412:	4413      	add	r3, r2
 8000414:	b29b      	uxth	r3, r3
 8000416:	b21a      	sxth	r2, r3
 8000418:	4b90      	ldr	r3, [pc, #576]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 800041a:	801a      	strh	r2, [r3, #0]
			//	((buf_in[1] & 0x00FF) + (buf_in[2] * 0x0100)) % 2048;
		channels[1].value = (buf_in[2] >> 3 | (buf_in[3] << 5)) & 0x07FF;
 800041c:	4b90      	ldr	r3, [pc, #576]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	08db      	lsrs	r3, r3, #3
 8000422:	b2db      	uxtb	r3, r3
 8000424:	b21a      	sxth	r2, r3
 8000426:	4b8e      	ldr	r3, [pc, #568]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000428:	78db      	ldrb	r3, [r3, #3]
 800042a:	015b      	lsls	r3, r3, #5
 800042c:	b21b      	sxth	r3, r3
 800042e:	4313      	orrs	r3, r2
 8000430:	b21b      	sxth	r3, r3
 8000432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000436:	b21a      	sxth	r2, r3
 8000438:	4b88      	ldr	r3, [pc, #544]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 800043a:	809a      	strh	r2, [r3, #4]
		channels[2].value = (buf_in[3] >> 6 | (buf_in[4] << 2) | buf_in[5] << 10) & 0x07FF;
 800043c:	4b88      	ldr	r3, [pc, #544]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800043e:	78db      	ldrb	r3, [r3, #3]
 8000440:	099b      	lsrs	r3, r3, #6
 8000442:	b2db      	uxtb	r3, r3
 8000444:	b21a      	sxth	r2, r3
 8000446:	4b86      	ldr	r3, [pc, #536]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	b21b      	sxth	r3, r3
 800044e:	4313      	orrs	r3, r2
 8000450:	b21a      	sxth	r2, r3
 8000452:	4b83      	ldr	r3, [pc, #524]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000454:	795b      	ldrb	r3, [r3, #5]
 8000456:	029b      	lsls	r3, r3, #10
 8000458:	b21b      	sxth	r3, r3
 800045a:	4313      	orrs	r3, r2
 800045c:	b21b      	sxth	r3, r3
 800045e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000462:	b21a      	sxth	r2, r3
 8000464:	4b7d      	ldr	r3, [pc, #500]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 8000466:	811a      	strh	r2, [r3, #8]
		channels[3].value = (buf_in[5] >> 1 | (buf_in[6] << 7)) & 0x07FF;
 8000468:	4b7d      	ldr	r3, [pc, #500]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	085b      	lsrs	r3, r3, #1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	b21a      	sxth	r2, r3
 8000472:	4b7b      	ldr	r3, [pc, #492]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000474:	799b      	ldrb	r3, [r3, #6]
 8000476:	01db      	lsls	r3, r3, #7
 8000478:	b21b      	sxth	r3, r3
 800047a:	4313      	orrs	r3, r2
 800047c:	b21b      	sxth	r3, r3
 800047e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000482:	b21a      	sxth	r2, r3
 8000484:	4b75      	ldr	r3, [pc, #468]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 8000486:	819a      	strh	r2, [r3, #12]
		channels[4].value = (buf_in[6] >> 4 | (buf_in[7] << 4)) & 0x07FF;
 8000488:	4b75      	ldr	r3, [pc, #468]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800048a:	799b      	ldrb	r3, [r3, #6]
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	b2db      	uxtb	r3, r3
 8000490:	b21a      	sxth	r2, r3
 8000492:	4b73      	ldr	r3, [pc, #460]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000494:	79db      	ldrb	r3, [r3, #7]
 8000496:	011b      	lsls	r3, r3, #4
 8000498:	b21b      	sxth	r3, r3
 800049a:	4313      	orrs	r3, r2
 800049c:	b21b      	sxth	r3, r3
 800049e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80004a2:	b21a      	sxth	r2, r3
 80004a4:	4b6d      	ldr	r3, [pc, #436]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 80004a6:	821a      	strh	r2, [r3, #16]
		channels[5].value = (buf_in[7] >> 7 | (buf_in[8] << 1) | buf_in[9] << 9) & 0x07FF;
 80004a8:	4b6d      	ldr	r3, [pc, #436]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80004aa:	79db      	ldrb	r3, [r3, #7]
 80004ac:	09db      	lsrs	r3, r3, #7
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	b21a      	sxth	r2, r3
 80004b2:	4b6b      	ldr	r3, [pc, #428]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80004b4:	7a1b      	ldrb	r3, [r3, #8]
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	b21b      	sxth	r3, r3
 80004ba:	4313      	orrs	r3, r2
 80004bc:	b21a      	sxth	r2, r3
 80004be:	4b68      	ldr	r3, [pc, #416]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80004c0:	7a5b      	ldrb	r3, [r3, #9]
 80004c2:	025b      	lsls	r3, r3, #9
 80004c4:	b21b      	sxth	r3, r3
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80004ce:	b21a      	sxth	r2, r3
 80004d0:	4b62      	ldr	r3, [pc, #392]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 80004d2:	829a      	strh	r2, [r3, #20]
		channels[6].value = (buf_in[9] >> 2 | (buf_in[10] << 6)) & 0x07FF;
 80004d4:	4b62      	ldr	r3, [pc, #392]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80004d6:	7a5b      	ldrb	r3, [r3, #9]
 80004d8:	089b      	lsrs	r3, r3, #2
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	b21a      	sxth	r2, r3
 80004de:	4b60      	ldr	r3, [pc, #384]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80004e0:	7a9b      	ldrb	r3, [r3, #10]
 80004e2:	019b      	lsls	r3, r3, #6
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b21b      	sxth	r3, r3
 80004ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80004ee:	b21a      	sxth	r2, r3
 80004f0:	4b5a      	ldr	r3, [pc, #360]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 80004f2:	831a      	strh	r2, [r3, #24]
		channels[7].value = (buf_in[10] >> 5 | (buf_in[11] << 3)) & 0x07FF;
 80004f4:	4b5a      	ldr	r3, [pc, #360]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80004f6:	7a9b      	ldrb	r3, [r3, #10]
 80004f8:	095b      	lsrs	r3, r3, #5
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	b21a      	sxth	r2, r3
 80004fe:	4b58      	ldr	r3, [pc, #352]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000500:	7adb      	ldrb	r3, [r3, #11]
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	b21b      	sxth	r3, r3
 8000506:	4313      	orrs	r3, r2
 8000508:	b21b      	sxth	r3, r3
 800050a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800050e:	b21a      	sxth	r2, r3
 8000510:	4b52      	ldr	r3, [pc, #328]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 8000512:	839a      	strh	r2, [r3, #28]
		channels[8].value = (buf_in[12] << 0 | (buf_in[13] << 8)) & 0x07FF;
 8000514:	4b52      	ldr	r3, [pc, #328]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000516:	7b1b      	ldrb	r3, [r3, #12]
 8000518:	b21a      	sxth	r2, r3
 800051a:	4b51      	ldr	r3, [pc, #324]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800051c:	7b5b      	ldrb	r3, [r3, #13]
 800051e:	021b      	lsls	r3, r3, #8
 8000520:	b21b      	sxth	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b21b      	sxth	r3, r3
 8000526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800052a:	b21a      	sxth	r2, r3
 800052c:	4b4b      	ldr	r3, [pc, #300]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 800052e:	841a      	strh	r2, [r3, #32]
		channels[9].value = (buf_in[13] >> 3 | (buf_in[14] << 5)) & 0x07FF;
 8000530:	4b4b      	ldr	r3, [pc, #300]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000532:	7b5b      	ldrb	r3, [r3, #13]
 8000534:	08db      	lsrs	r3, r3, #3
 8000536:	b2db      	uxtb	r3, r3
 8000538:	b21a      	sxth	r2, r3
 800053a:	4b49      	ldr	r3, [pc, #292]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800053c:	7b9b      	ldrb	r3, [r3, #14]
 800053e:	015b      	lsls	r3, r3, #5
 8000540:	b21b      	sxth	r3, r3
 8000542:	4313      	orrs	r3, r2
 8000544:	b21b      	sxth	r3, r3
 8000546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800054a:	b21a      	sxth	r2, r3
 800054c:	4b43      	ldr	r3, [pc, #268]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 800054e:	849a      	strh	r2, [r3, #36]	; 0x24
		channels[10].value = (buf_in[14] >> 6 | (buf_in[15] << 2) | buf_in[16] << 10) & 0x07FF;
 8000550:	4b43      	ldr	r3, [pc, #268]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000552:	7b9b      	ldrb	r3, [r3, #14]
 8000554:	099b      	lsrs	r3, r3, #6
 8000556:	b2db      	uxtb	r3, r3
 8000558:	b21a      	sxth	r2, r3
 800055a:	4b41      	ldr	r3, [pc, #260]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800055c:	7bdb      	ldrb	r3, [r3, #15]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	b21b      	sxth	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b21a      	sxth	r2, r3
 8000566:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000568:	7c1b      	ldrb	r3, [r3, #16]
 800056a:	029b      	lsls	r3, r3, #10
 800056c:	b21b      	sxth	r3, r3
 800056e:	4313      	orrs	r3, r2
 8000570:	b21b      	sxth	r3, r3
 8000572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000576:	b21a      	sxth	r2, r3
 8000578:	4b38      	ldr	r3, [pc, #224]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 800057a:	851a      	strh	r2, [r3, #40]	; 0x28
		channels[11].value = (buf_in[16] >> 1 | (buf_in[17] << 7)) & 0x07FF;
 800057c:	4b38      	ldr	r3, [pc, #224]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800057e:	7c1b      	ldrb	r3, [r3, #16]
 8000580:	085b      	lsrs	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	b21a      	sxth	r2, r3
 8000586:	4b36      	ldr	r3, [pc, #216]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000588:	7c5b      	ldrb	r3, [r3, #17]
 800058a:	01db      	lsls	r3, r3, #7
 800058c:	b21b      	sxth	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b21b      	sxth	r3, r3
 8000592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000596:	b21a      	sxth	r2, r3
 8000598:	4b30      	ldr	r3, [pc, #192]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 800059a:	859a      	strh	r2, [r3, #44]	; 0x2c
		channels[12].value = (buf_in[17] >> 4 | (buf_in[18] << 4)) & 0x07FF;
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800059e:	7c5b      	ldrb	r3, [r3, #17]
 80005a0:	091b      	lsrs	r3, r3, #4
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	b21a      	sxth	r2, r3
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80005a8:	7c9b      	ldrb	r3, [r3, #18]
 80005aa:	011b      	lsls	r3, r3, #4
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 80005ba:	861a      	strh	r2, [r3, #48]	; 0x30
		channels[13].value = (buf_in[18] >> 7 | (buf_in[19] << 1) | buf_in[20] << 9) & 0x07FF;
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80005be:	7c9b      	ldrb	r3, [r3, #18]
 80005c0:	09db      	lsrs	r3, r3, #7
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	b21a      	sxth	r2, r3
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80005c8:	7cdb      	ldrb	r3, [r3, #19]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80005d4:	7d1b      	ldrb	r3, [r3, #20]
 80005d6:	025b      	lsls	r3, r3, #9
 80005d8:	b21b      	sxth	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b21b      	sxth	r3, r3
 80005de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 80005e6:	869a      	strh	r2, [r3, #52]	; 0x34
		channels[14].value = (buf_in[20] >> 2 | (buf_in[21] << 6)) & 0x07FF;
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80005ea:	7d1b      	ldrb	r3, [r3, #20]
 80005ec:	089b      	lsrs	r3, r3, #2
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	b21a      	sxth	r2, r3
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 80005f4:	7d5b      	ldrb	r3, [r3, #21]
 80005f6:	019b      	lsls	r3, r3, #6
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000602:	b21a      	sxth	r2, r3
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 8000606:	871a      	strh	r2, [r3, #56]	; 0x38
		channels[15].value = (buf_in[21] >> 5 | (buf_in[22] << 3)) & 0x07FF;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800060a:	7d5b      	ldrb	r3, [r3, #21]
 800060c:	095b      	lsrs	r3, r3, #5
 800060e:	b2db      	uxtb	r3, r3
 8000610:	b21a      	sxth	r2, r3
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000614:	7d9b      	ldrb	r3, [r3, #22]
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21b      	sxth	r3, r3
 800061e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 8000626:	879a      	strh	r2, [r3, #60]	; 0x3c

		if (buf_in[23] & (1 << 0)) {
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 800062a:	7ddb      	ldrb	r3, [r3, #23]
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d004      	beq.n	800063e <HAL_UART_RxCpltCallback+0x29a>
			channels[16].value = 1;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 8000636:	2201      	movs	r2, #1
 8000638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800063c:	e003      	b.n	8000646 <HAL_UART_RxCpltCallback+0x2a2>
		} else {
			channels[16].value = 0;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}

		if (buf_in[23] & (1 << 1)) {
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_UART_RxCpltCallback+0x2bc>)
 8000648:	7ddb      	ldrb	r3, [r3, #23]
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	2b00      	cmp	r3, #0
 8000650:	d008      	beq.n	8000664 <HAL_UART_RxCpltCallback+0x2c0>
			channels[17].value = 1;
 8000652:	4b02      	ldr	r3, [pc, #8]	; (800065c <HAL_UART_RxCpltCallback+0x2b8>)
 8000654:	2201      	movs	r2, #1
 8000656:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800065a:	e007      	b.n	800066c <HAL_UART_RxCpltCallback+0x2c8>
 800065c:	200002b8 	.word	0x200002b8
 8000660:	20000304 	.word	0x20000304
		} else {
			channels[17].value = 0;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_UART_RxCpltCallback+0x328>)
 8000666:	2200      	movs	r2, #0
 8000668:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		}
		// Failsafe
		failsafe_status = SBUS_SIGNAL_OK;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_UART_RxCpltCallback+0x32c>)
 800066e:	2200      	movs	r2, #0
 8000670:	801a      	strh	r2, [r3, #0]
		if (buf_in[23] & (1 << 2)) {
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_UART_RxCpltCallback+0x330>)
 8000674:	7ddb      	ldrb	r3, [r3, #23]
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <HAL_UART_RxCpltCallback+0x2e0>
			failsafe_status = SBUS_SIGNAL_LOST;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_UART_RxCpltCallback+0x32c>)
 8000680:	2201      	movs	r2, #1
 8000682:	801a      	strh	r2, [r3, #0]
		}

		if (buf_in[23] & (1 << 3)) {
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <HAL_UART_RxCpltCallback+0x330>)
 8000686:	7ddb      	ldrb	r3, [r3, #23]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <HAL_UART_RxCpltCallback+0x2f2>
			failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_UART_RxCpltCallback+0x32c>)
 8000692:	2203      	movs	r2, #3
 8000694:	801a      	strh	r2, [r3, #0]

		//	SBUS_footer=buf_in[24];

		// autotrim procedure

		packetCounter+= packetCounter<10;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HAL_UART_RxCpltCallback+0x334>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b09      	cmp	r3, #9
 800069c:	bf94      	ite	ls
 800069e:	2301      	movls	r3, #1
 80006a0:	2300      	movhi	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_UART_RxCpltCallback+0x334>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_UART_RxCpltCallback+0x334>)
 80006ae:	6013      	str	r3, [r2, #0]
	}
	HAL_status = HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)buf_in, 25);
 80006b0:	2219      	movs	r2, #25
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <HAL_UART_RxCpltCallback+0x330>)
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <HAL_UART_RxCpltCallback+0x338>)
 80006b6:	f006 f889 	bl	80067cc <HAL_UARTEx_ReceiveToIdle_IT>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_UART_RxCpltCallback+0x33c>)
 80006c0:	701a      	strb	r2, [r3, #0]

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200002b8 	.word	0x200002b8
 80006d0:	20000300 	.word	0x20000300
 80006d4:	20000304 	.word	0x20000304
 80006d8:	20000344 	.word	0x20000344
 80006dc:	20000200 	.word	0x20000200
 80006e0:	20000302 	.word	0x20000302

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
			channels[0].value = 992;
 80006ea:	4b9d      	ldr	r3, [pc, #628]	; (8000960 <main+0x27c>)
 80006ec:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80006f0:	801a      	strh	r2, [r3, #0]
			channels[1].value = 992;
 80006f2:	4b9b      	ldr	r3, [pc, #620]	; (8000960 <main+0x27c>)
 80006f4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80006f8:	809a      	strh	r2, [r3, #4]
			channels[0].trim = 992;
 80006fa:	4b99      	ldr	r3, [pc, #612]	; (8000960 <main+0x27c>)
 80006fc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000700:	805a      	strh	r2, [r3, #2]
			channels[1].trim = 992;
 8000702:	4b97      	ldr	r3, [pc, #604]	; (8000960 <main+0x27c>)
 8000704:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000708:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f001 fab5 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 f987 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f000 fae9 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000716:	f000 fab9 	bl	8000c8c <MX_DMA_Init>
  MX_I2C1_Init();
 800071a:	f000 f9dd 	bl	8000ad8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800071e:	f000 fa09 	bl	8000b34 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000722:	f000 fa87 	bl	8000c34 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000726:	f000 f9c3 	bl	8000ab0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500); // for stable init screen
 800072a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072e:	f001 fb05 	bl	8001d3c <HAL_Delay>

	ssd1306_Init();
 8000732:	f000 fe73 	bl	800141c <ssd1306_Init>
  	ssd1306_SetColor(White);
 8000736:	2001      	movs	r0, #1
 8000738:	f000 fe60 	bl	80013fc <ssd1306_SetColor>
  	ssd1306_UpdateScreen();
 800073c:	f000 ff08 	bl	8001550 <ssd1306_UpdateScreen>
  	ssd1306_DisplayOn();
 8000740:	f001 fa42 	bl	8001bc8 <ssd1306_DisplayOn>
  	HAL_GPIO_WritePin(RX_INV_GPIO_Port, RX_INV_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074a:	4886      	ldr	r0, [pc, #536]	; (8000964 <main+0x280>)
 800074c:	f002 f856 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000750:	2108      	movs	r1, #8
 8000752:	4885      	ldr	r0, [pc, #532]	; (8000968 <main+0x284>)
 8000754:	f005 f90e 	bl	8005974 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000758:	210c      	movs	r1, #12
 800075a:	4883      	ldr	r0, [pc, #524]	; (8000968 <main+0x284>)
 800075c:	f005 f90a 	bl	8005974 <HAL_TIM_PWM_Start>
	HAL_status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)buf_in, 25);
 8000760:	2219      	movs	r2, #25
 8000762:	4982      	ldr	r1, [pc, #520]	; (800096c <main+0x288>)
 8000764:	4882      	ldr	r0, [pc, #520]	; (8000970 <main+0x28c>)
 8000766:	f006 f880 	bl	800686a <HAL_UARTEx_ReceiveToIdle_DMA>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b81      	ldr	r3, [pc, #516]	; (8000974 <main+0x290>)
 8000770:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ssd1306_Clear();
 8000772:	f001 fa31 	bl	8001bd8 <ssd1306_Clear>
	  ssd1306_DrawVerticalLine(64, 0, 3);
 8000776:	2203      	movs	r2, #3
 8000778:	2100      	movs	r1, #0
 800077a:	2040      	movs	r0, #64	; 0x40
 800077c:	f001 f826 	bl	80017cc <ssd1306_DrawVerticalLine>
	  if (channels[0].value > channels[0].trim) {
 8000780:	4b77      	ldr	r3, [pc, #476]	; (8000960 <main+0x27c>)
 8000782:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000786:	4b76      	ldr	r3, [pc, #472]	; (8000960 <main+0x27c>)
 8000788:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800078c:	429a      	cmp	r2, r3
 800078e:	dd12      	ble.n	80007b6 <main+0xd2>
	  ssd1306_DrawHorizontalLine(64, 1, (channels[0].value - channels[0].trim)/16);
 8000790:	4b73      	ldr	r3, [pc, #460]	; (8000960 <main+0x27c>)
 8000792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000796:	461a      	mov	r2, r3
 8000798:	4b71      	ldr	r3, [pc, #452]	; (8000960 <main+0x27c>)
 800079a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	da00      	bge.n	80007a6 <main+0xc2>
 80007a4:	330f      	adds	r3, #15
 80007a6:	111b      	asrs	r3, r3, #4
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	2101      	movs	r1, #1
 80007ae:	2040      	movs	r0, #64	; 0x40
 80007b0:	f000 ff6e 	bl	8001690 <ssd1306_DrawHorizontalLine>
 80007b4:	e021      	b.n	80007fa <main+0x116>
	  } else {
	  ssd1306_DrawHorizontalLine(64-(channels[0].trim-channels[0].value)/16, 1, (channels[0].trim - channels[0].value)/16);
 80007b6:	4b6a      	ldr	r3, [pc, #424]	; (8000960 <main+0x27c>)
 80007b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b68      	ldr	r3, [pc, #416]	; (8000960 <main+0x27c>)
 80007c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	da00      	bge.n	80007cc <main+0xe8>
 80007ca:	330f      	adds	r3, #15
 80007cc:	111b      	asrs	r3, r3, #4
 80007ce:	425b      	negs	r3, r3
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	3340      	adds	r3, #64	; 0x40
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	b218      	sxth	r0, r3
 80007d8:	4b61      	ldr	r3, [pc, #388]	; (8000960 <main+0x27c>)
 80007da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007de:	461a      	mov	r2, r3
 80007e0:	4b5f      	ldr	r3, [pc, #380]	; (8000960 <main+0x27c>)
 80007e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	da00      	bge.n	80007ee <main+0x10a>
 80007ec:	330f      	adds	r3, #15
 80007ee:	111b      	asrs	r3, r3, #4
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	2101      	movs	r1, #1
 80007f6:	f000 ff4b 	bl	8001690 <ssd1306_DrawHorizontalLine>
	  }
	  ssd1306_DrawVerticalLine(64, 5, 3);
 80007fa:	2203      	movs	r2, #3
 80007fc:	2105      	movs	r1, #5
 80007fe:	2040      	movs	r0, #64	; 0x40
 8000800:	f000 ffe4 	bl	80017cc <ssd1306_DrawVerticalLine>
	  if (channels[1].value > channels[1].trim) {
 8000804:	4b56      	ldr	r3, [pc, #344]	; (8000960 <main+0x27c>)
 8000806:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800080a:	4b55      	ldr	r3, [pc, #340]	; (8000960 <main+0x27c>)
 800080c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000810:	429a      	cmp	r2, r3
 8000812:	dd12      	ble.n	800083a <main+0x156>
		  ssd1306_DrawHorizontalLine(64, 6, (channels[1].value - channels[1].trim)/16);
 8000814:	4b52      	ldr	r3, [pc, #328]	; (8000960 <main+0x27c>)
 8000816:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800081a:	461a      	mov	r2, r3
 800081c:	4b50      	ldr	r3, [pc, #320]	; (8000960 <main+0x27c>)
 800081e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	da00      	bge.n	800082a <main+0x146>
 8000828:	330f      	adds	r3, #15
 800082a:	111b      	asrs	r3, r3, #4
 800082c:	b21b      	sxth	r3, r3
 800082e:	461a      	mov	r2, r3
 8000830:	2106      	movs	r1, #6
 8000832:	2040      	movs	r0, #64	; 0x40
 8000834:	f000 ff2c 	bl	8001690 <ssd1306_DrawHorizontalLine>
 8000838:	e021      	b.n	800087e <main+0x19a>
		  } else {
		  ssd1306_DrawHorizontalLine(64-(channels[1].trim - channels[1].value)/16, 6, (channels[1].trim - channels[1].value)/16);
 800083a:	4b49      	ldr	r3, [pc, #292]	; (8000960 <main+0x27c>)
 800083c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000840:	461a      	mov	r2, r3
 8000842:	4b47      	ldr	r3, [pc, #284]	; (8000960 <main+0x27c>)
 8000844:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	da00      	bge.n	8000850 <main+0x16c>
 800084e:	330f      	adds	r3, #15
 8000850:	111b      	asrs	r3, r3, #4
 8000852:	425b      	negs	r3, r3
 8000854:	b29b      	uxth	r3, r3
 8000856:	3340      	adds	r3, #64	; 0x40
 8000858:	b29b      	uxth	r3, r3
 800085a:	b218      	sxth	r0, r3
 800085c:	4b40      	ldr	r3, [pc, #256]	; (8000960 <main+0x27c>)
 800085e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000862:	461a      	mov	r2, r3
 8000864:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <main+0x27c>)
 8000866:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	da00      	bge.n	8000872 <main+0x18e>
 8000870:	330f      	adds	r3, #15
 8000872:	111b      	asrs	r3, r3, #4
 8000874:	b21b      	sxth	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	2106      	movs	r1, #6
 800087a:	f000 ff09 	bl	8001690 <ssd1306_DrawHorizontalLine>
		  }
		 ssd1306_DrawVerticalLine(64, 9, 3);
 800087e:	2203      	movs	r2, #3
 8000880:	2109      	movs	r1, #9
 8000882:	2040      	movs	r0, #64	; 0x40
 8000884:	f000 ffa2 	bl	80017cc <ssd1306_DrawVerticalLine>

  	  ssd1306_DrawHorizontalLine((left >0)?(64):(64 + left/16), 10, (abs(left))/16);
 8000888:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <main+0x294>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dc0a      	bgt.n	80008a6 <main+0x1c2>
 8000890:	4b39      	ldr	r3, [pc, #228]	; (8000978 <main+0x294>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	da00      	bge.n	800089a <main+0x1b6>
 8000898:	330f      	adds	r3, #15
 800089a:	111b      	asrs	r3, r3, #4
 800089c:	b29b      	uxth	r3, r3
 800089e:	3340      	adds	r3, #64	; 0x40
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	b218      	sxth	r0, r3
 80008a4:	e000      	b.n	80008a8 <main+0x1c4>
 80008a6:	2040      	movs	r0, #64	; 0x40
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <main+0x294>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bfb8      	it	lt
 80008b0:	425b      	neglt	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da00      	bge.n	80008b8 <main+0x1d4>
 80008b6:	330f      	adds	r3, #15
 80008b8:	111b      	asrs	r3, r3, #4
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	210a      	movs	r1, #10
 80008c0:	f000 fee6 	bl	8001690 <ssd1306_DrawHorizontalLine>
  	  ssd1306_DrawVerticalLine(64, 14, 3);
 80008c4:	2203      	movs	r2, #3
 80008c6:	210e      	movs	r1, #14
 80008c8:	2040      	movs	r0, #64	; 0x40
 80008ca:	f000 ff7f 	bl	80017cc <ssd1306_DrawVerticalLine>
  	  ssd1306_DrawHorizontalLine((right >0)?(64):(64 + right/16), 15, (abs(right))/16);
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <main+0x298>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dc0a      	bgt.n	80008ec <main+0x208>
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <main+0x298>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da00      	bge.n	80008e0 <main+0x1fc>
 80008de:	330f      	adds	r3, #15
 80008e0:	111b      	asrs	r3, r3, #4
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	3340      	adds	r3, #64	; 0x40
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b218      	sxth	r0, r3
 80008ea:	e000      	b.n	80008ee <main+0x20a>
 80008ec:	2040      	movs	r0, #64	; 0x40
 80008ee:	4b23      	ldr	r3, [pc, #140]	; (800097c <main+0x298>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bfb8      	it	lt
 80008f6:	425b      	neglt	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	da00      	bge.n	80008fe <main+0x21a>
 80008fc:	330f      	adds	r3, #15
 80008fe:	111b      	asrs	r3, r3, #4
 8000900:	b21b      	sxth	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	210f      	movs	r1, #15
 8000906:	f000 fec3 	bl	8001690 <ssd1306_DrawHorizontalLine>

      parse_Motion();
 800090a:	f7ff fc1f 	bl	800014c <parse_Motion>

      ssd1306_SetCursor(0, 17);
 800090e:	2111      	movs	r1, #17
 8000910:	2000      	movs	r0, #0
 8000912:	f001 f941 	bl	8001b98 <ssd1306_SetCursor>
            switch (HAL_status) {
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <main+0x290>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d839      	bhi.n	8000992 <main+0x2ae>
 800091e:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <main+0x240>)
 8000920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000924:	08000935 	.word	0x08000935
 8000928:	08000951 	.word	0x08000951
 800092c:	08000943 	.word	0x08000943
 8000930:	08000985 	.word	0x08000985
            case HAL_OK: ssd1306_WriteChar('+', Font_7x8); break;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <main+0x29c>)
 8000936:	e893 0006 	ldmia.w	r3, {r1, r2}
 800093a:	202b      	movs	r0, #43	; 0x2b
 800093c:	f001 f874 	bl	8001a28 <ssd1306_WriteChar>
 8000940:	e027      	b.n	8000992 <main+0x2ae>
            case HAL_BUSY: ssd1306_WriteChar('~', Font_7x8); break;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <main+0x29c>)
 8000944:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000948:	207e      	movs	r0, #126	; 0x7e
 800094a:	f001 f86d 	bl	8001a28 <ssd1306_WriteChar>
 800094e:	e020      	b.n	8000992 <main+0x2ae>
            case HAL_ERROR: ssd1306_WriteChar('-', Font_7x8); break;
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <main+0x29c>)
 8000952:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000956:	202d      	movs	r0, #45	; 0x2d
 8000958:	f001 f866 	bl	8001a28 <ssd1306_WriteChar>
 800095c:	e019      	b.n	8000992 <main+0x2ae>
 800095e:	bf00      	nop
 8000960:	200002b8 	.word	0x200002b8
 8000964:	40010800 	.word	0x40010800
 8000968:	20000130 	.word	0x20000130
 800096c:	20000304 	.word	0x20000304
 8000970:	20000200 	.word	0x20000200
 8000974:	20000302 	.word	0x20000302
 8000978:	2000033c 	.word	0x2000033c
 800097c:	20000340 	.word	0x20000340
 8000980:	20000004 	.word	0x20000004
            case HAL_TIMEOUT: ssd1306_WriteChar('T', Font_7x8); break;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <main+0x320>)
 8000986:	e893 0006 	ldmia.w	r3, {r1, r2}
 800098a:	2054      	movs	r0, #84	; 0x54
 800098c:	f001 f84c 	bl	8001a28 <ssd1306_WriteChar>
 8000990:	bf00      	nop
            }
      ssd1306_SetCursor(9, 17);
 8000992:	2111      	movs	r1, #17
 8000994:	2009      	movs	r0, #9
 8000996:	f001 f8ff 	bl	8001b98 <ssd1306_SetCursor>
      sprintf(str,"%02x%02x %2d %4d %4d",buf_in[1],buf_in[2], packetCounter,  channels[0].value,  channels[1].value);
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <main+0x324>)
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	4618      	mov	r0, r3
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <main+0x324>)
 80009a2:	789b      	ldrb	r3, [r3, #2]
 80009a4:	461c      	mov	r4, r3
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <main+0x328>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <main+0x32c>)
 80009ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009b0:	4611      	mov	r1, r2
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <main+0x32c>)
 80009b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009b8:	9202      	str	r2, [sp, #8]
 80009ba:	9101      	str	r1, [sp, #4]
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	4623      	mov	r3, r4
 80009c0:	4602      	mov	r2, r0
 80009c2:	4914      	ldr	r1, [pc, #80]	; (8000a14 <main+0x330>)
 80009c4:	4814      	ldr	r0, [pc, #80]	; (8000a18 <main+0x334>)
 80009c6:	f006 fd4b 	bl	8007460 <siprintf>
      ssd1306_WriteString(str, Font_7x8);
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <main+0x320>)
 80009cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <main+0x334>)
 80009d2:	f001 f8bb 	bl	8001b4c <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 80009d6:	f000 fdbb 	bl	8001550 <ssd1306_UpdateScreen>
	  HAL_Delay(50);
 80009da:	2032      	movs	r0, #50	; 0x32
 80009dc:	f001 f9ae 	bl	8001d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <main+0x338>)
 80009e6:	f001 ff21 	bl	800282c <HAL_GPIO_TogglePin>
	  packetCounter -= packetCounter>0;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <main+0x328>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <main+0x328>)
 80009f0:	6812      	ldr	r2, [r2, #0]
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	bf14      	ite	ne
 80009f6:	2201      	movne	r2, #1
 80009f8:	2200      	moveq	r2, #0
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <main+0x328>)
 8000a00:	6013      	str	r3, [r2, #0]
	  ssd1306_Clear();
 8000a02:	e6b6      	b.n	8000772 <main+0x8e>
 8000a04:	20000004 	.word	0x20000004
 8000a08:	20000304 	.word	0x20000304
 8000a0c:	20000344 	.word	0x20000344
 8000a10:	200002b8 	.word	0x200002b8
 8000a14:	08007d6c 	.word	0x08007d6c
 8000a18:	20000320 	.word	0x20000320
 8000a1c:	40011000 	.word	0x40011000

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b090      	sub	sp, #64	; 0x40
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	2228      	movs	r2, #40	; 0x28
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f006 fd0e 	bl	8007450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a54:	2302      	movs	r3, #2
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fa9b 	bl	8004fa4 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a74:	f000 f9c4 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2102      	movs	r1, #2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 fd07 	bl	80054a8 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000aa0:	f000 f9ae 	bl	8000e00 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000aa4:	f004 fdea 	bl	800567c <HAL_RCC_EnableCSS>
}
 8000aa8:	bf00      	nop
 8000aaa:	3740      	adds	r7, #64	; 0x40
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2010      	movs	r0, #16
 8000aba:	f001 fa3a 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000abe:	2010      	movs	r0, #16
 8000ac0:	f001 fa53 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2028      	movs	r0, #40	; 0x28
 8000aca:	f001 fa32 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ace:	2028      	movs	r0, #40	; 0x28
 8000ad0:	f001 fa4b 	bl	8001f6a <HAL_NVIC_EnableIRQ>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_I2C1_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b16:	f001 fec5 	bl	80028a4 <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 f96e 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000098 	.word	0x20000098
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	000186a0 	.word	0x000186a0

08000b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b6e:	2247      	movs	r2, #71	; 0x47
 8000b70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8c:	4828      	ldr	r0, [pc, #160]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b8e:	f004 fe49 	bl	8005824 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b98:	f000 f932 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4821      	ldr	r0, [pc, #132]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000baa:	f005 f9af 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bb4:	f000 f924 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bb8:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000bba:	f004 fe82 	bl	80058c2 <HAL_TIM_PWM_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bc4:	f000 f91c 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd0:	f107 0320 	add.w	r3, r7, #32
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4816      	ldr	r0, [pc, #88]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000bd8:	f005 fd2e 	bl	8006638 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000be2:	f000 f90d 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000bfe:	f005 f8c7 	bl	8005d90 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c08:	f000 f8fa 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	220c      	movs	r2, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000c14:	f005 f8bc 	bl	8005d90 <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c1e:	f000 f8ef 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c22:	4803      	ldr	r0, [pc, #12]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000c24:	f000 fa30 	bl	8001088 <HAL_TIM_MspPostInit>

}
 8000c28:	bf00      	nop
 8000c2a:	3738      	adds	r7, #56	; 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000130 	.word	0x20000130

08000c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_USART1_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <MX_USART1_UART_Init+0x54>)
 8000c42:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c58:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	220c      	movs	r2, #12
 8000c5e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	f005 fd53 	bl	8006718 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000c78:	f000 f8c2 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000200 	.word	0x20000200
 8000c84:	40013800 	.word	0x40013800
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_DMA_Init+0x58>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <MX_DMA_Init+0x58>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_DMA_Init+0x58>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	200b      	movs	r0, #11
 8000cb0:	f001 f93f 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cb4:	200b      	movs	r0, #11
 8000cb6:	f001 f958 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f001 f937 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	f001 f950 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2011      	movs	r0, #17
 8000cd0:	f001 f92f 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000cd4:	2011      	movs	r0, #17
 8000cd6:	f001 f948 	bl	8001f6a <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfc:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <MX_GPIO_Init+0x104>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a3a      	ldr	r2, [pc, #232]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d14:	4b35      	ldr	r3, [pc, #212]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a34      	ldr	r2, [pc, #208]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0320 	and.w	r3, r3, #32
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a2e      	ldr	r2, [pc, #184]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a28      	ldr	r2, [pc, #160]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d62:	4823      	ldr	r0, [pc, #140]	; (8000df0 <MX_GPIO_Init+0x108>)
 8000d64:	f001 fd4a 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_RIGHT_Pin|DIR_RIGHT_Pin|DIR_LEFT_Pin|EN_LEFT_Pin
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f640 0172 	movw	r1, #2162	; 0x872
 8000d6e:	4821      	ldr	r0, [pc, #132]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d70:	f001 fd44 	bl	80027fc <HAL_GPIO_WritePin>
                          |RX_INV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4818      	ldr	r0, [pc, #96]	; (8000df0 <MX_GPIO_Init+0x108>)
 8000d8e:	f001 fbb1 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_RIGHT_Pin DIR_RIGHT_Pin DIR_LEFT_Pin EN_LEFT_Pin
                           RX_INV_Pin */
  GPIO_InitStruct.Pin = EN_RIGHT_Pin|DIR_RIGHT_Pin|DIR_LEFT_Pin|EN_LEFT_Pin
 8000d92:	f640 0372 	movw	r3, #2162	; 0x872
 8000d96:	613b      	str	r3, [r7, #16]
                          |RX_INV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	4812      	ldr	r0, [pc, #72]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000dac:	f001 fba2 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_A_Pin KEY_B_Pin KEY_C_Pin */
  GPIO_InitStruct.Pin = KEY_A_Pin|KEY_B_Pin|KEY_C_Pin;
 8000db0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_GPIO_Init+0x110>)
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_GPIO_Init+0x114>)
 8000dc6:	f001 fb95 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_INV_Pin */
  GPIO_InitStruct.Pin = TX_INV_Pin;
 8000dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TX_INV_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000de0:	f001 fb88 	bl	80024f4 <HAL_GPIO_Init>

}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40011000 	.word	0x40011000
 8000df4:	40010800 	.word	0x40010800
 8000df8:	10110000 	.word	0x10110000
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_MspInit+0x5c>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_MspInit+0x5c>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6193      	str	r3, [r2, #24]
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_MspInit+0x5c>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_MspInit+0x5c>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_MspInit+0x5c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_MspInit+0x5c>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_MspInit+0x60>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_MspInit+0x60>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010000 	.word	0x40010000

08000e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a38      	ldr	r2, [pc, #224]	; (8000f6c <HAL_I2C_MspInit+0xfc>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d168      	bne.n	8000f62 <HAL_I2C_MspInit+0xf2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <HAL_I2C_MspInit+0x100>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <HAL_I2C_MspInit+0x100>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <HAL_I2C_MspInit+0x100>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eae:	2312      	movs	r3, #18
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482d      	ldr	r0, [pc, #180]	; (8000f74 <HAL_I2C_MspInit+0x104>)
 8000ebe:	f001 fb19 	bl	80024f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_I2C_MspInit+0x108>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed8:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <HAL_I2C_MspInit+0x108>)
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_I2C_MspInit+0x100>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <HAL_I2C_MspInit+0x100>)
 8000ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_I2C_MspInit+0x100>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <HAL_I2C_MspInit+0x110>)
 8000efa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f26:	4815      	ldr	r0, [pc, #84]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f28:	f001 f83a 	bl	8001fa0 <HAL_DMA_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8000f32:	f7ff ff65 	bl	8000e00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f3c:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_I2C_MspInit+0x10c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	201f      	movs	r0, #31
 8000f48:	f000 fff3 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f4c:	201f      	movs	r0, #31
 8000f4e:	f001 f80c 	bl	8001f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2020      	movs	r0, #32
 8000f58:	f000 ffeb 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f5c:	2020      	movs	r0, #32
 8000f5e:	f001 f804 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010c00 	.word	0x40010c00
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	200000ec 	.word	0x200000ec
 8000f80:	4002006c 	.word	0x4002006c

08000f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f94:	d169      	bne.n	800106a <HAL_TIM_Base_MspInit+0xe6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f96:	4b37      	ldr	r3, [pc, #220]	; (8001074 <HAL_TIM_Base_MspInit+0xf0>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a36      	ldr	r2, [pc, #216]	; (8001074 <HAL_TIM_Base_MspInit+0xf0>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <HAL_TIM_Base_MspInit+0xf0>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fb0:	4a32      	ldr	r2, [pc, #200]	; (800107c <HAL_TIM_Base_MspInit+0xf8>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fcc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000fe2:	4825      	ldr	r0, [pc, #148]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000fe4:	f000 ffdc 	bl	8001fa0 <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000fee:	f7ff ff07 	bl	8000e00 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ff8:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
 8001004:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <HAL_TIM_Base_MspInit+0xf4>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 800100c:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_TIM_Base_MspInit+0x100>)
 800100e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 8001012:	2210      	movs	r2, #16
 8001014:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 8001024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001028:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 800102c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001030:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800103e:	4810      	ldr	r0, [pc, #64]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 8001040:	f000 ffae 	bl	8001fa0 <HAL_DMA_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
 800104a:	f7ff fed9 	bl	8000e00 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_TIM_Base_MspInit+0xfc>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	201c      	movs	r0, #28
 8001060:	f000 ff67 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001064:	201c      	movs	r0, #28
 8001066:	f000 ff80 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	20000178 	.word	0x20000178
 800107c:	40020080 	.word	0x40020080
 8001080:	200001bc 	.word	0x200001bc
 8001084:	40020008 	.word	0x40020008

08001088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a6:	d117      	bne.n	80010d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_MspPostInit+0x58>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_TIM_MspPostInit+0x58>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_TIM_MspPostInit+0x58>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_RIGHT_Pin|PWM_LEFT_Pin;
 80010c0:	230c      	movs	r3, #12
 80010c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	4804      	ldr	r0, [pc, #16]	; (80010e4 <HAL_TIM_MspPostInit+0x5c>)
 80010d4:	f001 fa0e 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a34      	ldr	r2, [pc, #208]	; (80011d4 <HAL_UART_MspInit+0xec>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d160      	bne.n	80011ca <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001108:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <HAL_UART_MspInit+0xf0>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <HAL_UART_MspInit+0xf0>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_UART_MspInit+0xf0>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_UART_MspInit+0xf0>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <HAL_UART_MspInit+0xf0>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_UART_MspInit+0xf0>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <HAL_UART_MspInit+0xf4>)
 800114e:	f001 f9d1 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Pin;
 8001152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	481d      	ldr	r0, [pc, #116]	; (80011dc <HAL_UART_MspInit+0xf4>)
 8001168:	f001 f9c4 	bl	80024f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_UART_MspInit+0xfc>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 8001198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800119c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800119e:	4810      	ldr	r0, [pc, #64]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 80011a0:	f000 fefe 	bl	8001fa0 <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80011aa:	f7ff fe29 	bl	8000e00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_UART_MspInit+0xf8>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2025      	movs	r0, #37	; 0x25
 80011c0:	f000 feb7 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011c4:	2025      	movs	r0, #37	; 0x25
 80011c6:	f000 fed0 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	20000274 	.word	0x20000274
 80011e4:	40020058 	.word	0x40020058

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80011ec:	f004 fae2 	bl	80057b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x8>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001232:	f000 fd67 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <DMA1_Channel1_IRQHandler+0x10>)
 8001242:	f001 f817 	bl	8002274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200001bc 	.word	0x200001bc

08001250 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <DMA1_Channel5_IRQHandler+0x10>)
 8001256:	f001 f80d 	bl	8002274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000274 	.word	0x20000274

08001264 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Channel6_IRQHandler+0x10>)
 800126a:	f001 f803 	bl	8002274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000ec 	.word	0x200000ec

08001278 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA1_Channel7_IRQHandler+0x10>)
 800127e:	f000 fff9 	bl	8002274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000178 	.word	0x20000178

0800128c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM2_IRQHandler+0x10>)
 8001292:	f004 fc75 	bl	8005b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000130 	.word	0x20000130

080012a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <I2C1_EV_IRQHandler+0x10>)
 80012a6:	f001 febd 	bl	8003024 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000098 	.word	0x20000098

080012b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <I2C1_ER_IRQHandler+0x10>)
 80012ba:	f002 f824 	bl	8003306 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000098 	.word	0x20000098

080012c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <USART1_IRQHandler+0x14>)
 80012ce:	f005 fb1b 	bl	8006908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_RxCpltCallback(&huart1);
 80012d2:	4802      	ldr	r0, [pc, #8]	; (80012dc <USART1_IRQHandler+0x14>)
 80012d4:	f7ff f866 	bl	80003a4 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000200 	.word	0x20000200

080012e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80012e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012e8:	f001 faba 	bl	8002860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80012ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012f0:	f001 fab6 	bl	8002860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012f8:	f001 fab2 	bl	8002860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f006 f864 	bl	80073fc <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20005000 	.word	0x20005000
 8001360:	00000400 	.word	0x00000400
 8001364:	20000348 	.word	0x20000348
 8001368:	20000568 	.word	0x20000568

0800136c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	; (80013bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139e:	f7ff ffe5 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f006 f831 	bl	8007408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff f99d 	bl	80006e4 <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013b4:	080083d8 	.word	0x080083d8
  ldr r2, =_sbss
 80013b8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013bc:	20000568 	.word	0x20000568

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>

080013c2 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	2320      	movs	r3, #32
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <ssd1306_GetWidth>:
/* CODE END Private functions */

/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 80013e2:	2380      	movs	r3, #128	; 0x80
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 80013f0:	2320      	movs	r3, #32
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <ssd1306_SetColor>:
{
	return SSD1306.Color;
}

void ssd1306_SetColor(SSD1306_COLOR color)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <ssd1306_SetColor+0x1c>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	7153      	strb	r3, [r2, #5]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000034c 	.word	0x2000034c

0800141c <ssd1306_Init>:

//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8001420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001424:	2205      	movs	r2, #5
 8001426:	2178      	movs	r1, #120	; 0x78
 8001428:	4846      	ldr	r0, [pc, #280]	; (8001544 <ssd1306_Init+0x128>)
 800142a:	f001 fccd 	bl	8002dc8 <HAL_I2C_IsDeviceReady>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 8001434:	4b44      	ldr	r3, [pc, #272]	; (8001548 <ssd1306_Init+0x12c>)
 8001436:	2200      	movs	r2, #0
 8001438:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 800143a:	2300      	movs	r3, #0
 800143c:	e07f      	b.n	800153e <ssd1306_Init+0x122>
	}

	// Wait for the screen to boot
	HAL_Delay(100);
 800143e:	2064      	movs	r0, #100	; 0x64
 8001440:	f000 fc7c 	bl	8001d3c <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8001444:	20ae      	movs	r0, #174	; 0xae
 8001446:	f000 fbd3 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 800144a:	20d5      	movs	r0, #213	; 0xd5
 800144c:	f000 fbd0 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8001450:	20f0      	movs	r0, #240	; 0xf0
 8001452:	f000 fbcd 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8001456:	20a8      	movs	r0, #168	; 0xa8
 8001458:	f000 fbca 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 800145c:	f7ff ffb8 	bl	80013d0 <height>
 8001460:	4603      	mov	r3, r0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fbc1 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 800146e:	20d3      	movs	r0, #211	; 0xd3
 8001470:	f000 fbbe 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 fbbb 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 800147a:	2040      	movs	r0, #64	; 0x40
 800147c:	f000 fbb8 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8001480:	208d      	movs	r0, #141	; 0x8d
 8001482:	f000 fbb5 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8001486:	2014      	movs	r0, #20
 8001488:	f000 fbb2 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 800148c:	2020      	movs	r0, #32
 800148e:	f000 fbaf 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 fbac 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8001498:	20a0      	movs	r0, #160	; 0xa0
 800149a:	f000 fba9 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 800149e:	20c0      	movs	r0, #192	; 0xc0
 80014a0:	f000 fba6 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 80014a4:	20da      	movs	r0, #218	; 0xda
 80014a6:	f000 fba3 	bl	8001bf0 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <ssd1306_Init+0x130>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 80014b2:	2012      	movs	r0, #18
 80014b4:	f000 fb9c 	bl	8001bf0 <ssd1306_WriteCommand>
 80014b8:	e006      	b.n	80014c8 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <ssd1306_Init+0x130>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d102      	bne.n	80014c8 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f000 fb94 	bl	8001bf0 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 80014c8:	2081      	movs	r0, #129	; 0x81
 80014ca:	f000 fb91 	bl	8001bf0 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <ssd1306_Init+0x130>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 80014d6:	20cf      	movs	r0, #207	; 0xcf
 80014d8:	f000 fb8a 	bl	8001bf0 <ssd1306_WriteCommand>
 80014dc:	e006      	b.n	80014ec <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <ssd1306_Init+0x130>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 80014e6:	208f      	movs	r0, #143	; 0x8f
 80014e8:	f000 fb82 	bl	8001bf0 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 80014ec:	20d9      	movs	r0, #217	; 0xd9
 80014ee:	f000 fb7f 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 80014f2:	20f1      	movs	r0, #241	; 0xf1
 80014f4:	f000 fb7c 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 80014f8:	20db      	movs	r0, #219	; 0xdb
 80014fa:	f000 fb79 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 80014fe:	2040      	movs	r0, #64	; 0x40
 8001500:	f000 fb76 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8001504:	20a4      	movs	r0, #164	; 0xa4
 8001506:	f000 fb73 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 800150a:	20a6      	movs	r0, #166	; 0xa6
 800150c:	f000 fb70 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8001510:	202e      	movs	r0, #46	; 0x2e
 8001512:	f000 fb6d 	bl	8001bf0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8001516:	20af      	movs	r0, #175	; 0xaf
 8001518:	f000 fb6a 	bl	8001bf0 <ssd1306_WriteCommand>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <ssd1306_Init+0x12c>)
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <ssd1306_Init+0x12c>)
 8001524:	2200      	movs	r2, #0
 8001526:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <ssd1306_Init+0x12c>)
 800152a:	2200      	movs	r2, #0
 800152c:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 800152e:	f000 fb53 	bl	8001bd8 <ssd1306_Clear>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001532:	f000 f80d 	bl	8001550 <ssd1306_UpdateScreen>

	SSD1306.Initialized = 1;
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <ssd1306_Init+0x12c>)
 8001538:	2201      	movs	r2, #1
 800153a:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000098 	.word	0x20000098
 8001548:	2000034c 	.word	0x2000034c
 800154c:	2000000c 	.word	0x2000000c

08001550 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	e019      	b.n	8001590 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	3b50      	subs	r3, #80	; 0x50
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fb44 	bl	8001bf0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8001568:	2000      	movs	r0, #0
 800156a:	f000 fb41 	bl	8001bf0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 800156e:	2010      	movs	r0, #16
 8001570:	f000 fb3e 	bl	8001bf0 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	01db      	lsls	r3, r3, #7
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <ssd1306_UpdateScreen+0x50>)
 800157a:	189c      	adds	r4, r3, r2
 800157c:	f7ff ff21 	bl	80013c2 <width>
 8001580:	4603      	mov	r3, r0
 8001582:	4619      	mov	r1, r3
 8001584:	4620      	mov	r0, r4
 8001586:	f000 fb4f 	bl	8001c28 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3301      	adds	r3, #1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b07      	cmp	r3, #7
 8001594:	d9e2      	bls.n	800155c <ssd1306_UpdateScreen+0xc>
	}
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	20000354 	.word	0x20000354

080015a4 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 80015b4:	4b34      	ldr	r3, [pc, #208]	; (8001688 <ssd1306_DrawPixel+0xe4>)
 80015b6:	795b      	ldrb	r3, [r3, #5]
 80015b8:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	b29c      	uxth	r4, r3
 80015be:	f7ff ff0e 	bl	80013de <ssd1306_GetWidth>
 80015c2:	4603      	mov	r3, r0
 80015c4:	429c      	cmp	r4, r3
 80015c6:	d25a      	bcs.n	800167e <ssd1306_DrawPixel+0xda>
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	b29c      	uxth	r4, r3
 80015cc:	f7ff ff0e 	bl	80013ec <ssd1306_GetHeight>
 80015d0:	4603      	mov	r3, r0
 80015d2:	429c      	cmp	r4, r3
 80015d4:	d253      	bcs.n	800167e <ssd1306_DrawPixel+0xda>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <ssd1306_DrawPixel+0xe4>)
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color
	if (color == White)
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d121      	bne.n	8001636 <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 80015f2:	79fc      	ldrb	r4, [r7, #7]
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	b2dd      	uxtb	r5, r3
 80015fa:	462e      	mov	r6, r5
 80015fc:	f7ff fee1 	bl	80013c2 <width>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	4603      	mov	r3, r0
 8001606:	fb06 f303 	mul.w	r3, r6, r3
 800160a:	4423      	add	r3, r4
 800160c:	4a1f      	ldr	r2, [pc, #124]	; (800168c <ssd1306_DrawPixel+0xe8>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	b25a      	sxtb	r2, r3
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	b25b      	sxtb	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b259      	sxtb	r1, r3
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	462b      	mov	r3, r5
 8001628:	fb00 f303 	mul.w	r3, r0, r3
 800162c:	4413      	add	r3, r2
 800162e:	b2c9      	uxtb	r1, r1
 8001630:	4a16      	ldr	r2, [pc, #88]	; (800168c <ssd1306_DrawPixel+0xe8>)
 8001632:	54d1      	strb	r1, [r2, r3]
 8001634:	e024      	b.n	8001680 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001636:	79fc      	ldrb	r4, [r7, #7]
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	b2dd      	uxtb	r5, r3
 800163e:	462e      	mov	r6, r5
 8001640:	f7ff febf 	bl	80013c2 <width>
 8001644:	4603      	mov	r3, r0
 8001646:	4618      	mov	r0, r3
 8001648:	4603      	mov	r3, r0
 800164a:	fb06 f303 	mul.w	r3, r6, r3
 800164e:	4423      	add	r3, r4
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <ssd1306_DrawPixel+0xe8>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	b25a      	sxtb	r2, r3
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	b25b      	sxtb	r3, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4013      	ands	r3, r2
 800166a:	b259      	sxtb	r1, r3
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	462b      	mov	r3, r5
 8001670:	fb00 f303 	mul.w	r3, r0, r3
 8001674:	4413      	add	r3, r2
 8001676:	b2c9      	uxtb	r1, r1
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <ssd1306_DrawPixel+0xe8>)
 800167a:	54d1      	strb	r1, [r2, r3]
 800167c:	e000      	b.n	8001680 <ssd1306_DrawPixel+0xdc>
		return;
 800167e:	bf00      	nop
	}
}
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001686:	bf00      	nop
 8001688:	2000034c 	.word	0x2000034c
 800168c:	20000354 	.word	0x20000354

08001690 <ssd1306_DrawHorizontalLine>:
		}
	}
}

void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
 800169a:	460b      	mov	r3, r1
 800169c:	80bb      	strh	r3, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	807b      	strh	r3, [r7, #2]
  if (y < 0 || y >= height()) { return; }
 80016a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f2c0 8086 	blt.w	80017b8 <ssd1306_DrawHorizontalLine+0x128>
 80016ac:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80016b0:	f7ff fe8e 	bl	80013d0 <height>
 80016b4:	4603      	mov	r3, r0
 80016b6:	429c      	cmp	r4, r3
 80016b8:	da7e      	bge.n	80017b8 <ssd1306_DrawHorizontalLine+0x128>

  if (x < 0)
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da06      	bge.n	80016d0 <ssd1306_DrawHorizontalLine+0x40>
  {
    length += x;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4413      	add	r3, r2
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	807b      	strh	r3, [r7, #2]
    x = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	80fb      	strh	r3, [r7, #6]
  }

  if ( (x + length) > width())
 80016d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016d8:	18d4      	adds	r4, r2, r3
 80016da:	f7ff fe72 	bl	80013c2 <width>
 80016de:	4603      	mov	r3, r0
 80016e0:	429c      	cmp	r4, r3
 80016e2:	dd07      	ble.n	80016f4 <ssd1306_DrawHorizontalLine+0x64>
  {
    length = (width() - x);
 80016e4:	f7ff fe6d 	bl	80013c2 <width>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	807b      	strh	r3, [r7, #2]
  }

  if (length <= 0) { return; }
 80016f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	dd5f      	ble.n	80017bc <ssd1306_DrawHorizontalLine+0x12c>

  uint8_t * bufferPtr = SSD1306_Buffer;
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <ssd1306_DrawHorizontalLine+0x134>)
 80016fe:	60fb      	str	r3, [r7, #12]
  bufferPtr += (y >> 3) * width();
 8001700:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001704:	10db      	asrs	r3, r3, #3
 8001706:	b21b      	sxth	r3, r3
 8001708:	461c      	mov	r4, r3
 800170a:	f7ff fe5a 	bl	80013c2 <width>
 800170e:	4603      	mov	r3, r0
 8001710:	fb04 f303 	mul.w	r3, r4, r3
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
  bufferPtr += x;
 800171c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

  uint8_t drawBit = 1 << (y & 7);
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	2201      	movs	r2, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	72fb      	strb	r3, [r7, #11]

  switch (SSD1306.Color)
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <ssd1306_DrawHorizontalLine+0x138>)
 8001736:	795b      	ldrb	r3, [r3, #5]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d034      	beq.n	80017a6 <ssd1306_DrawHorizontalLine+0x116>
 800173c:	2b02      	cmp	r3, #2
 800173e:	dc3e      	bgt.n	80017be <ssd1306_DrawHorizontalLine+0x12e>
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <ssd1306_DrawHorizontalLine+0xdc>
 8001744:	2b01      	cmp	r3, #1
 8001746:	d13a      	bne.n	80017be <ssd1306_DrawHorizontalLine+0x12e>
  {
    case White:
    	while (length--)
 8001748:	e007      	b.n	800175a <ssd1306_DrawHorizontalLine+0xca>
    	{
    		*bufferPtr++ |= drawBit;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	60fa      	str	r2, [r7, #12]
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	7afa      	ldrb	r2, [r7, #11]
 8001754:	430a      	orrs	r2, r1
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]
    	while (length--)
 800175a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800175e:	b29a      	uxth	r2, r3
 8001760:	3a01      	subs	r2, #1
 8001762:	b292      	uxth	r2, r2
 8001764:	807a      	strh	r2, [r7, #2]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ef      	bne.n	800174a <ssd1306_DrawHorizontalLine+0xba>
    	};
    	break;
 800176a:	e028      	b.n	80017be <ssd1306_DrawHorizontalLine+0x12e>
    case Black:
    	drawBit = ~drawBit;
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	43db      	mvns	r3, r3
 8001770:	72fb      	strb	r3, [r7, #11]
    	while (length--)
 8001772:	e007      	b.n	8001784 <ssd1306_DrawHorizontalLine+0xf4>
    	{
    		*bufferPtr++ &= drawBit;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60fa      	str	r2, [r7, #12]
 800177a:	7819      	ldrb	r1, [r3, #0]
 800177c:	7afa      	ldrb	r2, [r7, #11]
 800177e:	400a      	ands	r2, r1
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8001784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001788:	b29a      	uxth	r2, r3
 800178a:	3a01      	subs	r2, #1
 800178c:	b292      	uxth	r2, r2
 800178e:	807a      	strh	r2, [r7, #2]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ef      	bne.n	8001774 <ssd1306_DrawHorizontalLine+0xe4>
    	};
    	break;
 8001794:	e013      	b.n	80017be <ssd1306_DrawHorizontalLine+0x12e>
    case Inverse:
    	while (length--)
    	{
    		*bufferPtr++ ^= drawBit;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	60fa      	str	r2, [r7, #12]
 800179c:	7819      	ldrb	r1, [r3, #0]
 800179e:	7afa      	ldrb	r2, [r7, #11]
 80017a0:	404a      	eors	r2, r1
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]
    	while (length--)
 80017a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	3a01      	subs	r2, #1
 80017ae:	b292      	uxth	r2, r2
 80017b0:	807a      	strh	r2, [r7, #2]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ef      	bne.n	8001796 <ssd1306_DrawHorizontalLine+0x106>
    	}; break;
 80017b6:	e002      	b.n	80017be <ssd1306_DrawHorizontalLine+0x12e>
  if (y < 0 || y >= height()) { return; }
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <ssd1306_DrawHorizontalLine+0x12e>
  if (length <= 0) { return; }
 80017bc:	bf00      	nop
  }
}
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	20000354 	.word	0x20000354
 80017c8:	2000034c 	.word	0x2000034c

080017cc <ssd1306_DrawVerticalLine>:

void ssd1306_DrawVerticalLine(int16_t x, int16_t y, int16_t length)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
 80017d6:	460b      	mov	r3, r1
 80017d8:	80bb      	strh	r3, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	807b      	strh	r3, [r7, #2]
  if (x < 0 || x >= width()) return;
 80017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f2c0 8113 	blt.w	8001a0e <ssd1306_DrawVerticalLine+0x242>
 80017e8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80017ec:	f7ff fde9 	bl	80013c2 <width>
 80017f0:	4603      	mov	r3, r0
 80017f2:	429c      	cmp	r4, r3
 80017f4:	f280 810b 	bge.w	8001a0e <ssd1306_DrawVerticalLine+0x242>

  if (y < 0)
 80017f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da06      	bge.n	800180e <ssd1306_DrawVerticalLine+0x42>
  {
    length += y;
 8001800:	887a      	ldrh	r2, [r7, #2]
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	807b      	strh	r3, [r7, #2]
    y = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	80bb      	strh	r3, [r7, #4]
  }

  if ( (y + length) > height())
 800180e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001812:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001816:	18d4      	adds	r4, r2, r3
 8001818:	f7ff fdda 	bl	80013d0 <height>
 800181c:	4603      	mov	r3, r0
 800181e:	429c      	cmp	r4, r3
 8001820:	dd07      	ble.n	8001832 <ssd1306_DrawVerticalLine+0x66>
  {
    length = (height() - y);
 8001822:	f7ff fdd5 	bl	80013d0 <height>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	b29b      	uxth	r3, r3
 8001830:	807b      	strh	r3, [r7, #2]
  }

  if (length <= 0) return;
 8001832:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f340 80eb 	ble.w	8001a12 <ssd1306_DrawVerticalLine+0x246>


  uint8_t yOffset = y & 7;
 800183c:	88bb      	ldrh	r3, [r7, #4]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	73fb      	strb	r3, [r7, #15]
  uint8_t drawBit;
  uint8_t *bufferPtr = SSD1306_Buffer;
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <ssd1306_DrawVerticalLine+0x254>)
 8001848:	613b      	str	r3, [r7, #16]

  bufferPtr += (y >> 3) * width();
 800184a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800184e:	10db      	asrs	r3, r3, #3
 8001850:	b21b      	sxth	r3, r3
 8001852:	461c      	mov	r4, r3
 8001854:	f7ff fdb5 	bl	80013c2 <width>
 8001858:	4603      	mov	r3, r0
 800185a:	fb04 f303 	mul.w	r3, r4, r3
 800185e:	461a      	mov	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4413      	add	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
  bufferPtr += x;
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4413      	add	r3, r2
 800186e:	613b      	str	r3, [r7, #16]

  if (yOffset)
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d056      	beq.n	8001924 <ssd1306_DrawVerticalLine+0x158>
  {
    yOffset = 8 - yOffset;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	f1c3 0308 	rsb	r3, r3, #8
 800187c:	73fb      	strb	r3, [r7, #15]
    drawBit = ~(0xFF >> (yOffset));
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	22ff      	movs	r2, #255	; 0xff
 8001882:	fa42 f303 	asr.w	r3, r2, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	75fb      	strb	r3, [r7, #23]

    if (length < yOffset)
 800188c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	429a      	cmp	r2, r3
 8001894:	da0c      	bge.n	80018b0 <ssd1306_DrawVerticalLine+0xe4>
    {
      drawBit &= (0xFF >> (yOffset - length));
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	22ff      	movs	r2, #255	; 0xff
 80018a0:	fa42 f303 	asr.w	r3, r2, r3
 80018a4:	b25a      	sxtb	r2, r3
 80018a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018aa:	4013      	ands	r3, r2
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	75fb      	strb	r3, [r7, #23]
    }

    switch (SSD1306.Color)
 80018b0:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <ssd1306_DrawVerticalLine+0x258>)
 80018b2:	795b      	ldrb	r3, [r3, #5]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d01a      	beq.n	80018ee <ssd1306_DrawVerticalLine+0x122>
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	dc20      	bgt.n	80018fe <ssd1306_DrawVerticalLine+0x132>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <ssd1306_DrawVerticalLine+0x108>
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d11c      	bne.n	80018fe <ssd1306_DrawVerticalLine+0x132>
    {
      case White:   *bufferPtr |=  drawBit; break;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e014      	b.n	80018fe <ssd1306_DrawVerticalLine+0x132>
      case Black:   *bufferPtr &= ~drawBit; break;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b25a      	sxtb	r2, r3
 80018da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018de:	43db      	mvns	r3, r3
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	4013      	ands	r3, r2
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e007      	b.n	80018fe <ssd1306_DrawVerticalLine+0x132>
      case Inverse: *bufferPtr ^=  drawBit; break;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	4053      	eors	r3, r2
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	bf00      	nop
    }

    if (length < yOffset) return;
 80018fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	429a      	cmp	r2, r3
 8001906:	f2c0 8086 	blt.w	8001a16 <ssd1306_DrawVerticalLine+0x24a>

    length -= yOffset;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	807b      	strh	r3, [r7, #2]
    bufferPtr += width();
 8001916:	f7ff fd54 	bl	80013c2 <width>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
  }

  if (length >= 8)
 8001924:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001928:	2b07      	cmp	r3, #7
 800192a:	dd3b      	ble.n	80019a4 <ssd1306_DrawVerticalLine+0x1d8>
  {
    switch (SSD1306.Color)
 800192c:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <ssd1306_DrawVerticalLine+0x258>)
 800192e:	795b      	ldrb	r3, [r3, #5]
 8001930:	2b01      	cmp	r3, #1
 8001932:	dc02      	bgt.n	800193a <ssd1306_DrawVerticalLine+0x16e>
 8001934:	2b00      	cmp	r3, #0
 8001936:	da03      	bge.n	8001940 <ssd1306_DrawVerticalLine+0x174>
 8001938:	e035      	b.n	80019a6 <ssd1306_DrawVerticalLine+0x1da>
 800193a:	2b02      	cmp	r3, #2
 800193c:	d01c      	beq.n	8001978 <ssd1306_DrawVerticalLine+0x1ac>
 800193e:	e032      	b.n	80019a6 <ssd1306_DrawVerticalLine+0x1da>
    {
      case White:
      case Black:
        drawBit = (SSD1306.Color == White) ? 0xFF : 0x00;
 8001940:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <ssd1306_DrawVerticalLine+0x258>)
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <ssd1306_DrawVerticalLine+0x180>
 8001948:	23ff      	movs	r3, #255	; 0xff
 800194a:	e000      	b.n	800194e <ssd1306_DrawVerticalLine+0x182>
 800194c:	2300      	movs	r3, #0
 800194e:	75fb      	strb	r3, [r7, #23]
        do {
          *bufferPtr = drawBit;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	7dfa      	ldrb	r2, [r7, #23]
 8001954:	701a      	strb	r2, [r3, #0]
          bufferPtr += width();
 8001956:	f7ff fd34 	bl	80013c2 <width>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4413      	add	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
          length -= 8;
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	3b08      	subs	r3, #8
 8001968:	b29b      	uxth	r3, r3
 800196a:	807b      	strh	r3, [r7, #2]
        } while (length >= 8);
 800196c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001970:	2b07      	cmp	r3, #7
 8001972:	dced      	bgt.n	8001950 <ssd1306_DrawVerticalLine+0x184>
        break;
 8001974:	e017      	b.n	80019a6 <ssd1306_DrawVerticalLine+0x1da>
      case Inverse:
 8001976:	bf00      	nop
        do {
          *bufferPtr = ~(*bufferPtr);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	43db      	mvns	r3, r3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	701a      	strb	r2, [r3, #0]
          bufferPtr += width();
 8001984:	f7ff fd1d 	bl	80013c2 <width>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4413      	add	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
          length -= 8;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	3b08      	subs	r3, #8
 8001996:	b29b      	uxth	r3, r3
 8001998:	807b      	strh	r3, [r7, #2]
        } while (length >= 8);
 800199a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800199e:	2b07      	cmp	r3, #7
 80019a0:	dce9      	bgt.n	8001976 <ssd1306_DrawVerticalLine+0x1aa>
        break;
 80019a2:	e000      	b.n	80019a6 <ssd1306_DrawVerticalLine+0x1da>
    }
  }
 80019a4:	bf00      	nop

  if (length > 0)
 80019a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	dd34      	ble.n	8001a18 <ssd1306_DrawVerticalLine+0x24c>
  {
    drawBit = (1 << (length & 7)) - 1;
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	2201      	movs	r2, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	75fb      	strb	r3, [r7, #23]
    switch (SSD1306.Color)
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <ssd1306_DrawVerticalLine+0x258>)
 80019c2:	795b      	ldrb	r3, [r3, #5]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d01a      	beq.n	80019fe <ssd1306_DrawVerticalLine+0x232>
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	dc25      	bgt.n	8001a18 <ssd1306_DrawVerticalLine+0x24c>
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d009      	beq.n	80019e4 <ssd1306_DrawVerticalLine+0x218>
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d121      	bne.n	8001a18 <ssd1306_DrawVerticalLine+0x24c>
    {
      case White:   *bufferPtr |=  drawBit; break;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	4313      	orrs	r3, r2
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e019      	b.n	8001a18 <ssd1306_DrawVerticalLine+0x24c>
      case Black:   *bufferPtr &= ~drawBit; break;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b25a      	sxtb	r2, r3
 80019ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	4013      	ands	r3, r2
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e00c      	b.n	8001a18 <ssd1306_DrawVerticalLine+0x24c>
      case Inverse: *bufferPtr ^=  drawBit; break;
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	4053      	eors	r3, r2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e004      	b.n	8001a18 <ssd1306_DrawVerticalLine+0x24c>
  if (x < 0 || x >= width()) return;
 8001a0e:	bf00      	nop
 8001a10:	e002      	b.n	8001a18 <ssd1306_DrawVerticalLine+0x24c>
  if (length <= 0) return;
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <ssd1306_DrawVerticalLine+0x24c>
    if (length < yOffset) return;
 8001a16:	bf00      	nop
    }
  }
}
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000354 	.word	0x20000354
 8001a24:	2000034c 	.word	0x2000034c

08001a28 <ssd1306_WriteChar>:
		pY += 8;
	}
}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	e883 0006 	stmia.w	r3, {r1, r2}
 8001a34:	4603      	mov	r3, r0
 8001a36:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001a38:	f7ff fcc3 	bl	80013c2 <width>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	793b      	ldrb	r3, [r7, #4]
 8001a48:	440b      	add	r3, r1
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dd0a      	ble.n	8001a64 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8001a4e:	f7ff fcbf 	bl	80013d0 <height>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001a58:	885b      	ldrh	r3, [r3, #2]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	797b      	ldrb	r3, [r7, #5]
 8001a5e:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dc01      	bgt.n	8001a68 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	e06a      	b.n	8001b3e <ssd1306_WriteChar+0x116>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	e059      	b.n	8001b22 <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	3b20      	subs	r3, #32
 8001a74:	7979      	ldrb	r1, [r7, #5]
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	440b      	add	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	e041      	b.n	8001b12 <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d011      	beq.n	8001ac2 <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2d8      	uxtb	r0, r3
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001aae:	885b      	ldrh	r3, [r3, #2]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff fd72 	bl	80015a4 <ssd1306_DrawPixel>
 8001ac0:	e024      	b.n	8001b0c <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001ac4:	795b      	ldrb	r3, [r3, #5]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001ad4:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2d8      	uxtb	r0, r3
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001ae6:	885b      	ldrh	r3, [r3, #2]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff fd56 	bl	80015a4 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001afa:	795b      	ldrb	r3, [r3, #5]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001b0a:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	793b      	ldrb	r3, [r7, #4]
 8001b14:	461a      	mov	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d3b8      	bcc.n	8001a8e <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	797b      	ldrb	r3, [r7, #5]
 8001b24:	461a      	mov	r2, r3
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d3a0      	bcc.n	8001a6e <ssd1306_WriteChar+0x46>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	793b      	ldrb	r3, [r7, #4]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <ssd1306_WriteChar+0x120>)
 8001b3a:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000034c 	.word	0x2000034c

08001b4c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 8001b5a:	e012      	b.n	8001b82 <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	7818      	ldrb	r0, [r3, #0]
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b66:	f7ff ff5f 	bl	8001a28 <ssd1306_WriteChar>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d002      	beq.n	8001b7c <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	e008      	b.n	8001b8e <ssd1306_WriteString+0x42>
		}

		// Next char
		str++;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1e8      	bne.n	8001b5c <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <ssd1306_SetCursor+0x2c>)
 8001bae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <ssd1306_SetCursor+0x2c>)
 8001bb6:	805a      	strh	r2, [r3, #2]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000034c 	.word	0x2000034c

08001bc8 <ssd1306_DisplayOn>:

void ssd1306_DisplayOn(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(DISPLAYON);
 8001bcc:	20af      	movs	r0, #175	; 0xaf
 8001bce:	f000 f80f 	bl	8001bf0 <ssd1306_WriteCommand>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <ssd1306_Clear>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}

void ssd1306_Clear()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be0:	2100      	movs	r1, #0
 8001be2:	4802      	ldr	r0, [pc, #8]	; (8001bec <ssd1306_Clear+0x14>)
 8001be4:	f005 fc34 	bl	8007450 <memset>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000354 	.word	0x20000354

08001bf0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001bfa:	bf00      	nop
 8001bfc:	4809      	ldr	r0, [pc, #36]	; (8001c24 <ssd1306_WriteCommand+0x34>)
 8001bfe:	f001 fc86 	bl	800350e <HAL_I2C_GetState>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d1f9      	bne.n	8001bfc <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2301      	movs	r3, #1
 8001c12:	2200      	movs	r2, #0
 8001c14:	2178      	movs	r1, #120	; 0x78
 8001c16:	4803      	ldr	r0, [pc, #12]	; (8001c24 <ssd1306_WriteCommand+0x34>)
 8001c18:	f000 ff88 	bl	8002b2c <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
#endif
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000098 	.word	0x20000098

08001c28 <ssd1306_WriteData>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001c34:	bf00      	nop
 8001c36:	480a      	ldr	r0, [pc, #40]	; (8001c60 <ssd1306_WriteData+0x38>)
 8001c38:	f001 fc69 	bl	800350e <HAL_I2C_GetState>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d1f9      	bne.n	8001c36 <ssd1306_WriteData+0xe>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8001c42:	887b      	ldrh	r3, [r7, #2]
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	2178      	movs	r1, #120	; 0x78
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <ssd1306_WriteData+0x38>)
 8001c52:	f000 ff6b 	bl	8002b2c <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
#endif
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000098 	.word	0x20000098

08001c64 <HAL_I2C_MemTxCpltCallback>:

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_Init+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_Init+0x28>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f947 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f808 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff f8ba 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f95f 	bl	8001f86 <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 f927 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000014 	.word	0x20000014
 8001d00:	20000010 	.word	0x20000010

08001d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_IncTick+0x1c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_IncTick+0x20>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <HAL_IncTick+0x20>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000014 	.word	0x20000014
 8001d24:	20000554 	.word	0x20000554

08001d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <HAL_GetTick+0x10>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000554 	.word	0x20000554

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff fff0 	bl	8001d28 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffe0 	bl	8001d28 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000014 	.word	0x20000014

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4906      	ldr	r1, [pc, #24]	; (8001e1c <__NVIC_EnableIRQ+0x34>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff90 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff2d 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff42 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff90 	bl	8001e74 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5f 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff35 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e043      	b.n	800203e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <HAL_DMA_Init+0xa8>)
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a22      	ldr	r2, [pc, #136]	; (800204c <HAL_DMA_Init+0xac>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	009a      	lsls	r2, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <HAL_DMA_Init+0xb0>)
 8001fd2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	bffdfff8 	.word	0xbffdfff8
 800204c:	cccccccd 	.word	0xcccccccd
 8002050:	40020000 	.word	0x40020000

08002054 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_DMA_Start_IT+0x20>
 8002070:	2302      	movs	r3, #2
 8002072:	e04a      	b.n	800210a <HAL_DMA_Start_IT+0xb6>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002082:	2b01      	cmp	r3, #1
 8002084:	d13a      	bne.n	80020fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f9f4 	bl	8002498 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 020e 	orr.w	r2, r2, #14
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e00f      	b.n	80020ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0204 	bic.w	r2, r2, #4
 80020d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 020a 	orr.w	r2, r2, #10
 80020e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e005      	b.n	8002108 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002104:	2302      	movs	r3, #2
 8002106:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002108:	7dfb      	ldrb	r3, [r7, #23]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002124:	2b02      	cmp	r3, #2
 8002126:	d008      	beq.n	800213a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2204      	movs	r2, #4
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e020      	b.n	800217c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 020e 	bic.w	r2, r2, #14
 8002148:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800219a:	2b02      	cmp	r3, #2
 800219c:	d005      	beq.n	80021aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2204      	movs	r2, #4
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e051      	b.n	800224e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 020e 	bic.w	r2, r2, #14
 80021b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_DMA_Abort_IT+0xd0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d029      	beq.n	8002228 <HAL_DMA_Abort_IT+0xa0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a20      	ldr	r2, [pc, #128]	; (800225c <HAL_DMA_Abort_IT+0xd4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d022      	beq.n	8002224 <HAL_DMA_Abort_IT+0x9c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <HAL_DMA_Abort_IT+0xd8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d01a      	beq.n	800221e <HAL_DMA_Abort_IT+0x96>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_DMA_Abort_IT+0xdc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d012      	beq.n	8002218 <HAL_DMA_Abort_IT+0x90>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_DMA_Abort_IT+0xe0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00a      	beq.n	8002212 <HAL_DMA_Abort_IT+0x8a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1a      	ldr	r2, [pc, #104]	; (800226c <HAL_DMA_Abort_IT+0xe4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d102      	bne.n	800220c <HAL_DMA_Abort_IT+0x84>
 8002206:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800220a:	e00e      	b.n	800222a <HAL_DMA_Abort_IT+0xa2>
 800220c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002210:	e00b      	b.n	800222a <HAL_DMA_Abort_IT+0xa2>
 8002212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002216:	e008      	b.n	800222a <HAL_DMA_Abort_IT+0xa2>
 8002218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221c:	e005      	b.n	800222a <HAL_DMA_Abort_IT+0xa2>
 800221e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002222:	e002      	b.n	800222a <HAL_DMA_Abort_IT+0xa2>
 8002224:	2310      	movs	r3, #16
 8002226:	e000      	b.n	800222a <HAL_DMA_Abort_IT+0xa2>
 8002228:	2301      	movs	r3, #1
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_DMA_Abort_IT+0xe8>)
 800222c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
    } 
  }
  return status;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40020008 	.word	0x40020008
 800225c:	4002001c 	.word	0x4002001c
 8002260:	40020030 	.word	0x40020030
 8002264:	40020044 	.word	0x40020044
 8002268:	40020058 	.word	0x40020058
 800226c:	4002006c 	.word	0x4002006c
 8002270:	40020000 	.word	0x40020000

08002274 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2204      	movs	r2, #4
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d04f      	beq.n	800233c <HAL_DMA_IRQHandler+0xc8>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d04a      	beq.n	800233c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0204 	bic.w	r2, r2, #4
 80022c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a66      	ldr	r2, [pc, #408]	; (8002464 <HAL_DMA_IRQHandler+0x1f0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d029      	beq.n	8002322 <HAL_DMA_IRQHandler+0xae>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_DMA_IRQHandler+0x1f4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d022      	beq.n	800231e <HAL_DMA_IRQHandler+0xaa>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a63      	ldr	r2, [pc, #396]	; (800246c <HAL_DMA_IRQHandler+0x1f8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01a      	beq.n	8002318 <HAL_DMA_IRQHandler+0xa4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a62      	ldr	r2, [pc, #392]	; (8002470 <HAL_DMA_IRQHandler+0x1fc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d012      	beq.n	8002312 <HAL_DMA_IRQHandler+0x9e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a60      	ldr	r2, [pc, #384]	; (8002474 <HAL_DMA_IRQHandler+0x200>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00a      	beq.n	800230c <HAL_DMA_IRQHandler+0x98>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <HAL_DMA_IRQHandler+0x204>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d102      	bne.n	8002306 <HAL_DMA_IRQHandler+0x92>
 8002300:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002304:	e00e      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 8002306:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800230a:	e00b      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 800230c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002310:	e008      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 8002312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002316:	e005      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 8002318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231c:	e002      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	e000      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 8002322:	2304      	movs	r3, #4
 8002324:	4a55      	ldr	r2, [pc, #340]	; (800247c <HAL_DMA_IRQHandler+0x208>)
 8002326:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8094 	beq.w	800245a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800233a:	e08e      	b.n	800245a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2202      	movs	r2, #2
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d056      	beq.n	80023fa <HAL_DMA_IRQHandler+0x186>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d051      	beq.n	80023fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 020a 	bic.w	r2, r2, #10
 8002372:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a38      	ldr	r2, [pc, #224]	; (8002464 <HAL_DMA_IRQHandler+0x1f0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d029      	beq.n	80023da <HAL_DMA_IRQHandler+0x166>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a37      	ldr	r2, [pc, #220]	; (8002468 <HAL_DMA_IRQHandler+0x1f4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x162>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a35      	ldr	r2, [pc, #212]	; (800246c <HAL_DMA_IRQHandler+0x1f8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01a      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x15c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a34      	ldr	r2, [pc, #208]	; (8002470 <HAL_DMA_IRQHandler+0x1fc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d012      	beq.n	80023ca <HAL_DMA_IRQHandler+0x156>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a32      	ldr	r2, [pc, #200]	; (8002474 <HAL_DMA_IRQHandler+0x200>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x150>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_DMA_IRQHandler+0x204>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d102      	bne.n	80023be <HAL_DMA_IRQHandler+0x14a>
 80023b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023bc:	e00e      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	e00b      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c8:	e008      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ce:	e005      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d4:	e002      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023d6:	2320      	movs	r3, #32
 80023d8:	e000      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023da:	2302      	movs	r3, #2
 80023dc:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_DMA_IRQHandler+0x208>)
 80023de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d034      	beq.n	800245a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023f8:	e02f      	b.n	800245a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2208      	movs	r2, #8
 8002400:	409a      	lsls	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d028      	beq.n	800245c <HAL_DMA_IRQHandler+0x1e8>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 020e 	bic.w	r2, r2, #14
 8002422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f202 	lsl.w	r2, r1, r2
 8002432:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
    }
  }
  return;
 800245a:	bf00      	nop
 800245c:	bf00      	nop
}
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40020008 	.word	0x40020008
 8002468:	4002001c 	.word	0x4002001c
 800246c:	40020030 	.word	0x40020030
 8002470:	40020044 	.word	0x40020044
 8002474:	40020058 	.word	0x40020058
 8002478:	4002006c 	.word	0x4002006c
 800247c:	40020000 	.word	0x40020000

08002480 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d108      	bne.n	80024d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024d6:	e007      	b.n	80024e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b08b      	sub	sp, #44	; 0x2c
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002506:	e169      	b.n	80027dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002508:	2201      	movs	r2, #1
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 8158 	bne.w	80027d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a9a      	ldr	r2, [pc, #616]	; (8002794 <HAL_GPIO_Init+0x2a0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d05e      	beq.n	80025ee <HAL_GPIO_Init+0xfa>
 8002530:	4a98      	ldr	r2, [pc, #608]	; (8002794 <HAL_GPIO_Init+0x2a0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d875      	bhi.n	8002622 <HAL_GPIO_Init+0x12e>
 8002536:	4a98      	ldr	r2, [pc, #608]	; (8002798 <HAL_GPIO_Init+0x2a4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d058      	beq.n	80025ee <HAL_GPIO_Init+0xfa>
 800253c:	4a96      	ldr	r2, [pc, #600]	; (8002798 <HAL_GPIO_Init+0x2a4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d86f      	bhi.n	8002622 <HAL_GPIO_Init+0x12e>
 8002542:	4a96      	ldr	r2, [pc, #600]	; (800279c <HAL_GPIO_Init+0x2a8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d052      	beq.n	80025ee <HAL_GPIO_Init+0xfa>
 8002548:	4a94      	ldr	r2, [pc, #592]	; (800279c <HAL_GPIO_Init+0x2a8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d869      	bhi.n	8002622 <HAL_GPIO_Init+0x12e>
 800254e:	4a94      	ldr	r2, [pc, #592]	; (80027a0 <HAL_GPIO_Init+0x2ac>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d04c      	beq.n	80025ee <HAL_GPIO_Init+0xfa>
 8002554:	4a92      	ldr	r2, [pc, #584]	; (80027a0 <HAL_GPIO_Init+0x2ac>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d863      	bhi.n	8002622 <HAL_GPIO_Init+0x12e>
 800255a:	4a92      	ldr	r2, [pc, #584]	; (80027a4 <HAL_GPIO_Init+0x2b0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d046      	beq.n	80025ee <HAL_GPIO_Init+0xfa>
 8002560:	4a90      	ldr	r2, [pc, #576]	; (80027a4 <HAL_GPIO_Init+0x2b0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d85d      	bhi.n	8002622 <HAL_GPIO_Init+0x12e>
 8002566:	2b12      	cmp	r3, #18
 8002568:	d82a      	bhi.n	80025c0 <HAL_GPIO_Init+0xcc>
 800256a:	2b12      	cmp	r3, #18
 800256c:	d859      	bhi.n	8002622 <HAL_GPIO_Init+0x12e>
 800256e:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <HAL_GPIO_Init+0x80>)
 8002570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002574:	080025ef 	.word	0x080025ef
 8002578:	080025c9 	.word	0x080025c9
 800257c:	080025db 	.word	0x080025db
 8002580:	0800261d 	.word	0x0800261d
 8002584:	08002623 	.word	0x08002623
 8002588:	08002623 	.word	0x08002623
 800258c:	08002623 	.word	0x08002623
 8002590:	08002623 	.word	0x08002623
 8002594:	08002623 	.word	0x08002623
 8002598:	08002623 	.word	0x08002623
 800259c:	08002623 	.word	0x08002623
 80025a0:	08002623 	.word	0x08002623
 80025a4:	08002623 	.word	0x08002623
 80025a8:	08002623 	.word	0x08002623
 80025ac:	08002623 	.word	0x08002623
 80025b0:	08002623 	.word	0x08002623
 80025b4:	08002623 	.word	0x08002623
 80025b8:	080025d1 	.word	0x080025d1
 80025bc:	080025e5 	.word	0x080025e5
 80025c0:	4a79      	ldr	r2, [pc, #484]	; (80027a8 <HAL_GPIO_Init+0x2b4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025c6:	e02c      	b.n	8002622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	623b      	str	r3, [r7, #32]
          break;
 80025ce:	e029      	b.n	8002624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	3304      	adds	r3, #4
 80025d6:	623b      	str	r3, [r7, #32]
          break;
 80025d8:	e024      	b.n	8002624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	3308      	adds	r3, #8
 80025e0:	623b      	str	r3, [r7, #32]
          break;
 80025e2:	e01f      	b.n	8002624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	330c      	adds	r3, #12
 80025ea:	623b      	str	r3, [r7, #32]
          break;
 80025ec:	e01a      	b.n	8002624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025f6:	2304      	movs	r3, #4
 80025f8:	623b      	str	r3, [r7, #32]
          break;
 80025fa:	e013      	b.n	8002624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002604:	2308      	movs	r3, #8
 8002606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	611a      	str	r2, [r3, #16]
          break;
 800260e:	e009      	b.n	8002624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002610:	2308      	movs	r3, #8
 8002612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	615a      	str	r2, [r3, #20]
          break;
 800261a:	e003      	b.n	8002624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800261c:	2300      	movs	r3, #0
 800261e:	623b      	str	r3, [r7, #32]
          break;
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x130>
          break;
 8002622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2bff      	cmp	r3, #255	; 0xff
 8002628:	d801      	bhi.n	800262e <HAL_GPIO_Init+0x13a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	e001      	b.n	8002632 <HAL_GPIO_Init+0x13e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2bff      	cmp	r3, #255	; 0xff
 8002638:	d802      	bhi.n	8002640 <HAL_GPIO_Init+0x14c>
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	e002      	b.n	8002646 <HAL_GPIO_Init+0x152>
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	3b08      	subs	r3, #8
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	210f      	movs	r1, #15
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	401a      	ands	r2, r3
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	431a      	orrs	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80b1 	beq.w	80027d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002674:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <HAL_GPIO_Init+0x2b8>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x2b8>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6193      	str	r3, [r2, #24]
 8002680:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_GPIO_Init+0x2b8>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800268c:	4a48      	ldr	r2, [pc, #288]	; (80027b0 <HAL_GPIO_Init+0x2bc>)
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	220f      	movs	r2, #15
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <HAL_GPIO_Init+0x2c0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d013      	beq.n	80026e0 <HAL_GPIO_Init+0x1ec>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3f      	ldr	r2, [pc, #252]	; (80027b8 <HAL_GPIO_Init+0x2c4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00d      	beq.n	80026dc <HAL_GPIO_Init+0x1e8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3e      	ldr	r2, [pc, #248]	; (80027bc <HAL_GPIO_Init+0x2c8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d007      	beq.n	80026d8 <HAL_GPIO_Init+0x1e4>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3d      	ldr	r2, [pc, #244]	; (80027c0 <HAL_GPIO_Init+0x2cc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d101      	bne.n	80026d4 <HAL_GPIO_Init+0x1e0>
 80026d0:	2303      	movs	r3, #3
 80026d2:	e006      	b.n	80026e2 <HAL_GPIO_Init+0x1ee>
 80026d4:	2304      	movs	r3, #4
 80026d6:	e004      	b.n	80026e2 <HAL_GPIO_Init+0x1ee>
 80026d8:	2302      	movs	r3, #2
 80026da:	e002      	b.n	80026e2 <HAL_GPIO_Init+0x1ee>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_GPIO_Init+0x1ee>
 80026e0:	2300      	movs	r3, #0
 80026e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e4:	f002 0203 	and.w	r2, r2, #3
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	4093      	lsls	r3, r2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026f2:	492f      	ldr	r1, [pc, #188]	; (80027b0 <HAL_GPIO_Init+0x2bc>)
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	492c      	ldr	r1, [pc, #176]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800271a:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	43db      	mvns	r3, r3
 8002722:	4928      	ldr	r1, [pc, #160]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 8002724:	4013      	ands	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002734:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4922      	ldr	r1, [pc, #136]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	43db      	mvns	r3, r3
 800274a:	491e      	ldr	r1, [pc, #120]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 800274c:	4013      	ands	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4918      	ldr	r1, [pc, #96]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	43db      	mvns	r3, r3
 8002772:	4914      	ldr	r1, [pc, #80]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 8002774:	4013      	ands	r3, r2
 8002776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d021      	beq.n	80027c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <HAL_GPIO_Init+0x2d0>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
 8002790:	e021      	b.n	80027d6 <HAL_GPIO_Init+0x2e2>
 8002792:	bf00      	nop
 8002794:	10320000 	.word	0x10320000
 8002798:	10310000 	.word	0x10310000
 800279c:	10220000 	.word	0x10220000
 80027a0:	10210000 	.word	0x10210000
 80027a4:	10120000 	.word	0x10120000
 80027a8:	10110000 	.word	0x10110000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40010800 	.word	0x40010800
 80027b8:	40010c00 	.word	0x40010c00
 80027bc:	40011000 	.word	0x40011000
 80027c0:	40011400 	.word	0x40011400
 80027c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_GPIO_Init+0x304>)
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	4909      	ldr	r1, [pc, #36]	; (80027f8 <HAL_GPIO_Init+0x304>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	3301      	adds	r3, #1
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f47f ae8e 	bne.w	8002508 <HAL_GPIO_Init+0x14>
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	372c      	adds	r7, #44	; 0x2c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	40010400 	.word	0x40010400

080027fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002818:	e003      	b.n	8002822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	041a      	lsls	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4013      	ands	r3, r2
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	43d9      	mvns	r1, r3
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	400b      	ands	r3, r1
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	611a      	str	r2, [r3, #16]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
	...

08002860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d006      	beq.n	8002884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f806 	bl	8002890 <HAL_GPIO_EXTI_Callback>
  }
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40010400 	.word	0x40010400

08002890 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e12b      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fad0 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002908:	f002 ff2c 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 800290c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a81      	ldr	r2, [pc, #516]	; (8002b18 <HAL_I2C_Init+0x274>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d807      	bhi.n	8002928 <HAL_I2C_Init+0x84>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a80      	ldr	r2, [pc, #512]	; (8002b1c <HAL_I2C_Init+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e006      	b.n	8002936 <HAL_I2C_Init+0x92>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a7d      	ldr	r2, [pc, #500]	; (8002b20 <HAL_I2C_Init+0x27c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0e7      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a78      	ldr	r2, [pc, #480]	; (8002b24 <HAL_I2C_Init+0x280>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9b      	lsrs	r3, r3, #18
 8002948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a6a      	ldr	r2, [pc, #424]	; (8002b18 <HAL_I2C_Init+0x274>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d802      	bhi.n	8002978 <HAL_I2C_Init+0xd4>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	e009      	b.n	800298c <HAL_I2C_Init+0xe8>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	4a69      	ldr	r2, [pc, #420]	; (8002b28 <HAL_I2C_Init+0x284>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	3301      	adds	r3, #1
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800299e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	495c      	ldr	r1, [pc, #368]	; (8002b18 <HAL_I2C_Init+0x274>)
 80029a8:	428b      	cmp	r3, r1
 80029aa:	d819      	bhi.n	80029e0 <HAL_I2C_Init+0x13c>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e59      	subs	r1, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ba:	1c59      	adds	r1, r3, #1
 80029bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029c0:	400b      	ands	r3, r1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_I2C_Init+0x138>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e59      	subs	r1, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	e051      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029dc:	2304      	movs	r3, #4
 80029de:	e04f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d111      	bne.n	8002a0c <HAL_I2C_Init+0x168>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e012      	b.n	8002a32 <HAL_I2C_Init+0x18e>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Init+0x196>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e022      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10e      	bne.n	8002a60 <HAL_I2C_Init+0x1bc>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e58      	subs	r0, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	440b      	add	r3, r1
 8002a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5e:	e00f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e58      	subs	r0, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	0099      	lsls	r1, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6809      	ldr	r1, [r1, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6911      	ldr	r1, [r2, #16]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	000186a0 	.word	0x000186a0
 8002b1c:	001e847f 	.word	0x001e847f
 8002b20:	003d08ff 	.word	0x003d08ff
 8002b24:	431bde83 	.word	0x431bde83
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	813b      	strh	r3, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4a:	f7ff f8ed 	bl	8001d28 <HAL_GetTick>
 8002b4e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	f040 8126 	bne.w	8002daa <HAL_I2C_Mem_Write_DMA+0x27e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b5e:	4b95      	ldr	r3, [pc, #596]	; (8002db4 <HAL_I2C_Mem_Write_DMA+0x288>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	4a94      	ldr	r2, [pc, #592]	; (8002db8 <HAL_I2C_Mem_Write_DMA+0x28c>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0a1a      	lsrs	r2, r3, #8
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009a      	lsls	r2, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0fc      	b.n	8002dac <HAL_I2C_Mem_Write_DMA+0x280>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d0db      	beq.n	8002b78 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_I2C_Mem_Write_DMA+0xa2>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0ee      	b.n	8002dac <HAL_I2C_Mem_Write_DMA+0x280>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d007      	beq.n	8002bf4 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2221      	movs	r2, #33	; 0x21
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a62      	ldr	r2, [pc, #392]	; (8002dbc <HAL_I2C_Mem_Write_DMA+0x290>)
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80a1 	beq.w	8002d82 <HAL_I2C_Mem_Write_DMA+0x256>
    {
      if (hi2c->hdmatx != NULL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d022      	beq.n	8002c8e <HAL_I2C_Mem_Write_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	4a5c      	ldr	r2, [pc, #368]	; (8002dc0 <HAL_I2C_Mem_Write_DMA+0x294>)
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	4a5b      	ldr	r2, [pc, #364]	; (8002dc4 <HAL_I2C_Mem_Write_DMA+0x298>)
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	2200      	movs	r2, #0
 8002c66:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	4619      	mov	r1, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3310      	adds	r3, #16
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	f7ff f9e9 	bl	8002054 <HAL_DMA_Start_IT>
 8002c82:	4603      	mov	r3, r0
 8002c84:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002c86:	7efb      	ldrb	r3, [r7, #27]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d166      	bne.n	8002d5a <HAL_I2C_Mem_Write_DMA+0x22e>
 8002c8c:	e013      	b.n	8002cb6 <HAL_I2C_Mem_Write_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07a      	b.n	8002dac <HAL_I2C_Mem_Write_DMA+0x280>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002cb6:	88f8      	ldrh	r0, [r7, #6]
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	2323      	movs	r3, #35	; 0x23
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f001 fd90 	bl	80047ec <I2C_RequestMemoryWrite>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d022      	beq.n	8002d18 <HAL_I2C_Mem_Write_DMA+0x1ec>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fa56 	bl	8002188 <HAL_DMA_Abort_IT>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e049      	b.n	8002dac <HAL_I2C_Mem_Write_DMA+0x280>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d44:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d54:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e028      	b.n	8002dac <HAL_I2C_Mem_Write_DMA+0x280>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e014      	b.n	8002dac <HAL_I2C_Mem_Write_DMA+0x280>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_I2C_Mem_Write_DMA+0x280>
    }
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000000 	.word	0x20000000
 8002db8:	14f8b589 	.word	0x14f8b589
 8002dbc:	ffff0000 	.word	0xffff0000
 8002dc0:	08004919 	.word	0x08004919
 8002dc4:	08004ac3 	.word	0x08004ac3

08002dc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7fe ffa6 	bl	8001d28 <HAL_GetTick>
 8002ddc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 8111 	bne.w	8003012 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	4988      	ldr	r1, [pc, #544]	; (800301c <HAL_I2C_IsDeviceReady+0x254>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f001 ff40 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e104      	b.n	8003014 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_IsDeviceReady+0x50>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0fd      	b.n	8003014 <HAL_I2C_IsDeviceReady+0x24c>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d007      	beq.n	8002e3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2224      	movs	r2, #36	; 0x24
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a70      	ldr	r2, [pc, #448]	; (8003020 <HAL_I2C_IsDeviceReady+0x258>)
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 fefe 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	d103      	bne.n	8002ea2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0b6      	b.n	8003014 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ea6:	897b      	ldrh	r3, [r7, #10]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eb4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe ff37 	bl	8001d28 <HAL_GetTick>
 8002eba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002eea:	e025      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002eec:	f7fe ff1c 	bl	8001d28 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d302      	bcc.n	8002f02 <HAL_I2C_IsDeviceReady+0x13a>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	22a0      	movs	r2, #160	; 0xa0
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2ba0      	cmp	r3, #160	; 0xa0
 8002f42:	d005      	beq.n	8002f50 <HAL_I2C_IsDeviceReady+0x188>
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <HAL_I2C_IsDeviceReady+0x188>
 8002f4a:	7dbb      	ldrb	r3, [r7, #22]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0cd      	beq.n	8002eec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d129      	bne.n	8002fba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2319      	movs	r3, #25
 8002f92:	2201      	movs	r2, #1
 8002f94:	4921      	ldr	r1, [pc, #132]	; (800301c <HAL_I2C_IsDeviceReady+0x254>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f001 fe72 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e036      	b.n	8003014 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e02c      	b.n	8003014 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2319      	movs	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	490f      	ldr	r1, [pc, #60]	; (800301c <HAL_I2C_IsDeviceReady+0x254>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f001 fe4e 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e012      	b.n	8003014 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f4ff af32 	bcc.w	8002e62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	00100002 	.word	0x00100002
 8003020:	ffff0000 	.word	0xffff0000

08003024 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003044:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b10      	cmp	r3, #16
 8003052:	d003      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0x38>
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	f040 80c1 	bne.w	80031de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <HAL_I2C_EV_IRQHandler+0x6e>
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800307c:	d003      	beq.n	8003086 <HAL_I2C_EV_IRQHandler+0x62>
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003084:	d101      	bne.n	800308a <HAL_I2C_EV_IRQHandler+0x66>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_I2C_EV_IRQHandler+0x68>
 800308a:	2300      	movs	r3, #0
 800308c:	2b01      	cmp	r3, #1
 800308e:	f000 8132 	beq.w	80032f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <HAL_I2C_EV_IRQHandler+0x92>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	0a5b      	lsrs	r3, r3, #9
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f001 ff61 	bl	8004f70 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fd7b 	bl	8003baa <I2C_Master_SB>
 80030b4:	e092      	b.n	80031dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	0a5b      	lsrs	r3, r3, #9
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fdf0 	bl	8003cb4 <I2C_Master_ADD10>
 80030d4:	e082      	b.n	80031dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	0a5b      	lsrs	r3, r3, #9
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fe09 	bl	8003d06 <I2C_Master_ADDR>
 80030f4:	e072      	b.n	80031dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03b      	beq.n	800317a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003110:	f000 80f3 	beq.w	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	09db      	lsrs	r3, r3, #7
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00f      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x11c>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	0a9b      	lsrs	r3, r3, #10
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x11c>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f9f5 	bl	8003528 <I2C_MasterTransmit_TXE>
 800313e:	e04d      	b.n	80031dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80d6 	beq.w	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	0a5b      	lsrs	r3, r3, #9
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80cf 	beq.w	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800315c:	7bbb      	ldrb	r3, [r7, #14]
 800315e:	2b21      	cmp	r3, #33	; 0x21
 8003160:	d103      	bne.n	800316a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa7c 	bl	8003660 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003168:	e0c7      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	f040 80c4 	bne.w	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 faea 	bl	800374c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003178:	e0bf      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	f000 80b7 	beq.w	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	099b      	lsrs	r3, r3, #6
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00f      	beq.n	80031b8 <HAL_I2C_EV_IRQHandler+0x194>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <HAL_I2C_EV_IRQHandler+0x194>
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d103      	bne.n	80031b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fb5f 	bl	8003874 <I2C_MasterReceive_RXNE>
 80031b6:	e011      	b.n	80031dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 809a 	beq.w	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	0a5b      	lsrs	r3, r3, #9
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8093 	beq.w	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fbfe 	bl	80039d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031da:	e08e      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80031dc:	e08d      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e007      	b.n	8003200 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_I2C_EV_IRQHandler+0x20e>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	0a5b      	lsrs	r3, r3, #9
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003228:	69b9      	ldr	r1, [r7, #24]
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 ffc2 	bl	80041b4 <I2C_Slave_ADDR>
 8003230:	e066      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_I2C_EV_IRQHandler+0x22e>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	0a5b      	lsrs	r3, r3, #9
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fffc 	bl	8004248 <I2C_Slave_STOPF>
 8003250:	e056      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003252:	7bbb      	ldrb	r3, [r7, #14]
 8003254:	2b21      	cmp	r3, #33	; 0x21
 8003256:	d002      	beq.n	800325e <HAL_I2C_EV_IRQHandler+0x23a>
 8003258:	7bbb      	ldrb	r3, [r7, #14]
 800325a:	2b29      	cmp	r3, #41	; 0x29
 800325c:	d125      	bne.n	80032aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	09db      	lsrs	r3, r3, #7
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00f      	beq.n	800328a <HAL_I2C_EV_IRQHandler+0x266>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	0a9b      	lsrs	r3, r3, #10
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_I2C_EV_IRQHandler+0x266>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 feda 	bl	800403c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003288:	e039      	b.n	80032fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d033      	beq.n	80032fe <HAL_I2C_EV_IRQHandler+0x2da>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	0a5b      	lsrs	r3, r3, #9
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d02d      	beq.n	80032fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 ff07 	bl	80040b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032a8:	e029      	b.n	80032fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00f      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	0a9b      	lsrs	r3, r3, #10
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 ff11 	bl	80040f6 <I2C_SlaveReceive_RXNE>
 80032d4:	e014      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00e      	beq.n	8003300 <HAL_I2C_EV_IRQHandler+0x2dc>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	0a5b      	lsrs	r3, r3, #9
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 ff3f 	bl	8004172 <I2C_SlaveReceive_BTF>
 80032f4:	e004      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80032f6:	bf00      	nop
 80032f8:	e002      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	; 0x28
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003328:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_I2C_ER_IRQHandler+0x5e>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003352:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	0a5b      	lsrs	r3, r3, #9
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x88>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800338c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	0a9b      	lsrs	r3, r3, #10
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d03f      	beq.n	800341a <HAL_I2C_ER_IRQHandler+0x114>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d039      	beq.n	800341a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80033c0:	7ebb      	ldrb	r3, [r7, #26]
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d112      	bne.n	80033ec <HAL_I2C_ER_IRQHandler+0xe6>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10f      	bne.n	80033ec <HAL_I2C_ER_IRQHandler+0xe6>
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b21      	cmp	r3, #33	; 0x21
 80033d0:	d008      	beq.n	80033e4 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b29      	cmp	r3, #41	; 0x29
 80033d6:	d005      	beq.n	80033e4 <HAL_I2C_ER_IRQHandler+0xde>
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	2b28      	cmp	r3, #40	; 0x28
 80033dc:	d106      	bne.n	80033ec <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b21      	cmp	r3, #33	; 0x21
 80033e2:	d103      	bne.n	80033ec <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f001 f85f 	bl	80044a8 <I2C_Slave_AF>
 80033ea:	e016      	b.n	800341a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	f043 0304 	orr.w	r3, r3, #4
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033fe:	7efb      	ldrb	r3, [r7, #27]
 8003400:	2b10      	cmp	r3, #16
 8003402:	d002      	beq.n	800340a <HAL_I2C_ER_IRQHandler+0x104>
 8003404:	7efb      	ldrb	r3, [r7, #27]
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d107      	bne.n	800341a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	0adb      	lsrs	r3, r3, #11
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00e      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0x13e>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	f043 0308 	orr.w	r3, r3, #8
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003442:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 f896 	bl	8004588 <I2C_ITError>
  }
}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
 80034b8:	4613      	mov	r3, r2
 80034ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d150      	bne.n	80035f0 <I2C_MasterTransmit_TXE+0xc8>
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b21      	cmp	r3, #33	; 0x21
 8003552:	d14d      	bne.n	80035f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b08      	cmp	r3, #8
 8003558:	d01d      	beq.n	8003596 <I2C_MasterTransmit_TXE+0x6e>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b20      	cmp	r3, #32
 800355e:	d01a      	beq.n	8003596 <I2C_MasterTransmit_TXE+0x6e>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003566:	d016      	beq.n	8003596 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003576:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2211      	movs	r2, #17
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff68 	bl	8003464 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003594:	e060      	b.n	8003658 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d107      	bne.n	80035e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7fe fb43 	bl	8001c64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035de:	e03b      	b.n	8003658 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff3b 	bl	8003464 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ee:	e033      	b.n	8003658 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b21      	cmp	r3, #33	; 0x21
 80035f4:	d005      	beq.n	8003602 <I2C_MasterTransmit_TXE+0xda>
 80035f6:	7bbb      	ldrb	r3, [r7, #14]
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d12d      	bne.n	8003658 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b22      	cmp	r3, #34	; 0x22
 8003600:	d12a      	bne.n	8003658 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d108      	bne.n	800361e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800361c:	e01c      	b.n	8003658 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d103      	bne.n	8003632 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f88e 	bl	800374c <I2C_MemoryTransmit_TXE_BTF>
}
 8003630:	e012      	b.n	8003658 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003656:	e7ff      	b.n	8003658 <I2C_MasterTransmit_TXE+0x130>
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b21      	cmp	r3, #33	; 0x21
 8003678:	d164      	bne.n	8003744 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d012      	beq.n	80036aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80036a8:	e04c      	b.n	8003744 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d01d      	beq.n	80036ec <I2C_MasterTransmit_BTF+0x8c>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d01a      	beq.n	80036ec <I2C_MasterTransmit_BTF+0x8c>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036bc:	d016      	beq.n	80036ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2211      	movs	r2, #17
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff febd 	bl	8003464 <HAL_I2C_MasterTxCpltCallback>
}
 80036ea:	e02b      	b.n	8003744 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d107      	bne.n	8003736 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe fa98 	bl	8001c64 <HAL_I2C_MemTxCpltCallback>
}
 8003734:	e006      	b.n	8003744 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fe90 	bl	8003464 <HAL_I2C_MasterTxCpltCallback>
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11d      	bne.n	80037a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10b      	bne.n	8003784 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003770:	b2da      	uxtb	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	1c9a      	adds	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003782:	e073      	b.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	b29b      	uxth	r3, r3
 800378a:	121b      	asrs	r3, r3, #8
 800378c:	b2da      	uxtb	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800379e:	e065      	b.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10b      	bne.n	80037c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037be:	e055      	b.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d151      	bne.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b22      	cmp	r3, #34	; 0x22
 80037cc:	d10d      	bne.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037e8:	e040      	b.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b21      	cmp	r3, #33	; 0x21
 80037f8:	d112      	bne.n	8003820 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800381e:	e025      	b.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d120      	bne.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b21      	cmp	r3, #33	; 0x21
 800382e:	d11d      	bne.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800383e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fe f9fc 	bl	8001c64 <HAL_I2C_MemTxCpltCallback>
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b22      	cmp	r3, #34	; 0x22
 8003886:	f040 80a2 	bne.w	80039ce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d921      	bls.n	80038dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	f040 8082 	bne.w	80039ce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80038da:	e078      	b.n	80039ce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d074      	beq.n	80039ce <I2C_MasterReceive_RXNE+0x15a>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d002      	beq.n	80038f0 <I2C_MasterReceive_RXNE+0x7c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d16e      	bne.n	80039ce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 fadd 	bl	8004eb0 <I2C_WaitOnSTOPRequestThroughIT>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d142      	bne.n	8003982 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800391a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d10a      	bne.n	800396c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fdb7 	bl	80034d8 <HAL_I2C_MemRxCpltCallback>
}
 800396a:	e030      	b.n	80039ce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2212      	movs	r2, #18
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fd7b 	bl	8003476 <HAL_I2C_MasterRxCpltCallback>
}
 8003980:	e025      	b.n	80039ce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003990:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fd8e 	bl	80034ea <HAL_I2C_ErrorCallback>
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d11b      	bne.n	8003a26 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a24:	e0bd      	b.n	8003ba2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d129      	bne.n	8003a84 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d00a      	beq.n	8003a5c <I2C_MasterReceive_BTF+0x86>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d007      	beq.n	8003a5c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a82:	e08e      	b.n	8003ba2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d176      	bne.n	8003b7c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d002      	beq.n	8003a9a <I2C_MasterReceive_BTF+0xc4>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d108      	bne.n	8003aac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e019      	b.n	8003ae0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d002      	beq.n	8003ab8 <I2C_MasterReceive_BTF+0xe2>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d108      	bne.n	8003aca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e00a      	b.n	8003ae0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d007      	beq.n	8003ae0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d10a      	bne.n	8003b66 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fcba 	bl	80034d8 <HAL_I2C_MemRxCpltCallback>
}
 8003b64:	e01d      	b.n	8003ba2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2212      	movs	r2, #18
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fc7e 	bl	8003476 <HAL_I2C_MasterRxCpltCallback>
}
 8003b7a:	e012      	b.n	8003ba2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d117      	bne.n	8003bee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bd6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bd8:	e067      	b.n	8003caa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]
}
 8003bec:	e05d      	b.n	8003caa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bf6:	d133      	bne.n	8003c60 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b21      	cmp	r3, #33	; 0x21
 8003c02:	d109      	bne.n	8003c18 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c14:	611a      	str	r2, [r3, #16]
 8003c16:	e008      	b.n	8003c2a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <I2C_Master_SB+0x92>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d032      	beq.n	8003caa <I2C_Master_SB+0x100>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02d      	beq.n	8003caa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5c:	605a      	str	r2, [r3, #4]
}
 8003c5e:	e024      	b.n	8003caa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10e      	bne.n	8003c86 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	11db      	asrs	r3, r3, #7
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f063 030f 	orn	r3, r3, #15
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	611a      	str	r2, [r3, #16]
}
 8003c84:	e011      	b.n	8003caa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10d      	bne.n	8003caa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	11db      	asrs	r3, r3, #7
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 0306 	and.w	r3, r3, #6
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f063 030e 	orn	r3, r3, #14
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	611a      	str	r2, [r3, #16]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <I2C_Master_ADD10+0x26>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d108      	bne.n	8003cec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <I2C_Master_ADD10+0x48>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfa:	605a      	str	r2, [r3, #4]
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b091      	sub	sp, #68	; 0x44
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b22      	cmp	r3, #34	; 0x22
 8003d2e:	f040 8174 	bne.w	800401a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <I2C_Master_ADDR+0x54>
 8003d3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d3e:	2b40      	cmp	r3, #64	; 0x40
 8003d40:	d10b      	bne.n	8003d5a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d42:	2300      	movs	r3, #0
 8003d44:	633b      	str	r3, [r7, #48]	; 0x30
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	e16b      	b.n	8004032 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11d      	bne.n	8003d9e <I2C_Master_ADDR+0x98>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d6a:	d118      	bne.n	8003d9e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d90:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d9c:	e149      	b.n	8004032 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d113      	bne.n	8003dd0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da8:	2300      	movs	r3, #0
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e120      	b.n	8004012 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	f040 808a 	bne.w	8003ef0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de2:	d137      	bne.n	8003e54 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e02:	d113      	bne.n	8003e2c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	e0f2      	b.n	8004012 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	623b      	str	r3, [r7, #32]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e0de      	b.n	8004012 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d02e      	beq.n	8003eb8 <I2C_Master_ADDR+0x1b2>
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d02b      	beq.n	8003eb8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e62:	2b12      	cmp	r3, #18
 8003e64:	d102      	bne.n	8003e6c <I2C_Master_ADDR+0x166>
 8003e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d125      	bne.n	8003eb8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d00e      	beq.n	8003e90 <I2C_Master_ADDR+0x18a>
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d00b      	beq.n	8003e90 <I2C_Master_ADDR+0x18a>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d008      	beq.n	8003e90 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e007      	b.n	8003ea0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e9e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	e0ac      	b.n	8004012 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e090      	b.n	8004012 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d158      	bne.n	8003fac <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d021      	beq.n	8003f44 <I2C_Master_ADDR+0x23e>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d01e      	beq.n	8003f44 <I2C_Master_ADDR+0x23e>
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d01b      	beq.n	8003f44 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e012      	b.n	8003f6a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f52:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f78:	d14b      	bne.n	8004012 <I2C_Master_ADDR+0x30c>
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f80:	d00b      	beq.n	8003f9a <I2C_Master_ADDR+0x294>
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d008      	beq.n	8003f9a <I2C_Master_ADDR+0x294>
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d005      	beq.n	8003f9a <I2C_Master_ADDR+0x294>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d002      	beq.n	8003f9a <I2C_Master_ADDR+0x294>
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d13b      	bne.n	8004012 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	e032      	b.n	8004012 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d117      	bne.n	8003ffc <I2C_Master_ADDR+0x2f6>
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd2:	d00b      	beq.n	8003fec <I2C_Master_ADDR+0x2e6>
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d008      	beq.n	8003fec <I2C_Master_ADDR+0x2e6>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d005      	beq.n	8003fec <I2C_Master_ADDR+0x2e6>
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d002      	beq.n	8003fec <I2C_Master_ADDR+0x2e6>
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d107      	bne.n	8003ffc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004018:	e00b      	b.n	8004032 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
}
 8004030:	e7ff      	b.n	8004032 <I2C_Master_ADDR+0x32c>
 8004032:	bf00      	nop
 8004034:	3744      	adds	r7, #68	; 0x44
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d02b      	beq.n	80040ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d114      	bne.n	80040ae <I2C_SlaveTransmit_TXE+0x72>
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b29      	cmp	r3, #41	; 0x29
 8004088:	d111      	bne.n	80040ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004098:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2221      	movs	r2, #33	; 0x21
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2228      	movs	r2, #40	; 0x28
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff f9ed 	bl	8003488 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d011      	beq.n	80040ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	781a      	ldrb	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02c      	beq.n	800416a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d114      	bne.n	800416a <I2C_SlaveReceive_RXNE+0x74>
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b2a      	cmp	r3, #42	; 0x2a
 8004144:	d111      	bne.n	800416a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004154:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2222      	movs	r2, #34	; 0x22
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2228      	movs	r2, #40	; 0x28
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff f998 	bl	800349a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d012      	beq.n	80041aa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041ce:	2b28      	cmp	r3, #40	; 0x28
 80041d0:	d127      	bne.n	8004222 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	09db      	lsrs	r3, r3, #7
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	81bb      	strh	r3, [r7, #12]
 8004204:	e002      	b.n	800420c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004214:	89ba      	ldrh	r2, [r7, #12]
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff f946 	bl	80034ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004220:	e00e      	b.n	8004240 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004266:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004268:	2300      	movs	r3, #0
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004294:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a4:	d172      	bne.n	800438c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b22      	cmp	r3, #34	; 0x22
 80042aa:	d002      	beq.n	80042b2 <I2C_Slave_STOPF+0x6a>
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b2a      	cmp	r3, #42	; 0x2a
 80042b0:	d135      	bne.n	800431e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f043 0204 	orr.w	r2, r3, #4
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe f8c8 	bl	8002480 <HAL_DMA_GetState>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d049      	beq.n	800438a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	4a69      	ldr	r2, [pc, #420]	; (80044a0 <I2C_Slave_STOPF+0x258>)
 80042fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd ff40 	bl	8002188 <HAL_DMA_Abort_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d03d      	beq.n	800438a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004318:	4610      	mov	r0, r2
 800431a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800431c:	e035      	b.n	800438a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004350:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe f892 	bl	8002480 <HAL_DMA_GetState>
 800435c:	4603      	mov	r3, r0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d014      	beq.n	800438c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	4a4e      	ldr	r2, [pc, #312]	; (80044a0 <I2C_Slave_STOPF+0x258>)
 8004368:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	4618      	mov	r0, r3
 8004370:	f7fd ff0a 	bl	8002188 <HAL_DMA_Abort_IT>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004384:	4610      	mov	r0, r2
 8004386:	4798      	blx	r3
 8004388:	e000      	b.n	800438c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800438a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03e      	beq.n	8004414 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d112      	bne.n	80043ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d112      	bne.n	80043fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0204 	orr.w	r2, r3, #4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8b3 	bl	8004588 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004422:	e039      	b.n	8004498 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b2a      	cmp	r3, #42	; 0x2a
 8004428:	d109      	bne.n	800443e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2228      	movs	r2, #40	; 0x28
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff f82e 	bl	800349a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b28      	cmp	r3, #40	; 0x28
 8004448:	d111      	bne.n	800446e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <I2C_Slave_STOPF+0x25c>)
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff f82d 	bl	80034c6 <HAL_I2C_ListenCpltCallback>
}
 800446c:	e014      	b.n	8004498 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	2b22      	cmp	r3, #34	; 0x22
 8004474:	d002      	beq.n	800447c <I2C_Slave_STOPF+0x234>
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b22      	cmp	r3, #34	; 0x22
 800447a:	d10d      	bne.n	8004498 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff f801 	bl	800349a <HAL_I2C_SlaveRxCpltCallback>
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	08004b31 	.word	0x08004b31
 80044a4:	ffff0000 	.word	0xffff0000

080044a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d002      	beq.n	80044ca <I2C_Slave_AF+0x22>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d129      	bne.n	800451e <I2C_Slave_AF+0x76>
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b28      	cmp	r3, #40	; 0x28
 80044ce:	d126      	bne.n	800451e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <I2C_Slave_AF+0xdc>)
 80044d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fe ffd5 	bl	80034c6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800451c:	e02e      	b.n	800457c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b21      	cmp	r3, #33	; 0x21
 8004522:	d126      	bne.n	8004572 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a17      	ldr	r2, [pc, #92]	; (8004584 <I2C_Slave_AF+0xdc>)
 8004528:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2221      	movs	r2, #33	; 0x21
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800454e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004558:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004568:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fe ff8c 	bl	8003488 <HAL_I2C_SlaveTxCpltCallback>
}
 8004570:	e004      	b.n	800457c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800457a:	615a      	str	r2, [r3, #20]
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	ffff0000 	.word	0xffff0000

08004588 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004596:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045a0:	7bbb      	ldrb	r3, [r7, #14]
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d002      	beq.n	80045ac <I2C_ITError+0x24>
 80045a6:	7bbb      	ldrb	r3, [r7, #14]
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d10a      	bne.n	80045c2 <I2C_ITError+0x3a>
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b22      	cmp	r3, #34	; 0x22
 80045b0:	d107      	bne.n	80045c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045c8:	2b28      	cmp	r3, #40	; 0x28
 80045ca:	d107      	bne.n	80045dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2228      	movs	r2, #40	; 0x28
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045da:	e015      	b.n	8004608 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ea:	d00a      	beq.n	8004602 <I2C_ITError+0x7a>
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b60      	cmp	r3, #96	; 0x60
 80045f0:	d007      	beq.n	8004602 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d161      	bne.n	80046dc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004626:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004630:	2b01      	cmp	r3, #1
 8004632:	d020      	beq.n	8004676 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	4a6a      	ldr	r2, [pc, #424]	; (80047e4 <I2C_ITError+0x25c>)
 800463a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	4618      	mov	r0, r3
 8004642:	f7fd fda1 	bl	8002188 <HAL_DMA_Abort_IT>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8089 	beq.w	8004760 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004670:	4610      	mov	r0, r2
 8004672:	4798      	blx	r3
 8004674:	e074      	b.n	8004760 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4a5a      	ldr	r2, [pc, #360]	; (80047e4 <I2C_ITError+0x25c>)
 800467c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fd80 	bl	8002188 <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d068      	beq.n	8004760 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d10b      	bne.n	80046b4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046d6:	4610      	mov	r0, r2
 80046d8:	4798      	blx	r3
 80046da:	e041      	b.n	8004760 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b60      	cmp	r3, #96	; 0x60
 80046e6:	d125      	bne.n	8004734 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d10b      	bne.n	800471c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7fe fee5 	bl	80034fc <HAL_I2C_AbortCpltCallback>
 8004732:	e015      	b.n	8004760 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d10b      	bne.n	800475a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fe fec5 	bl	80034ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10e      	bne.n	800478e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800479c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d113      	bne.n	80047da <I2C_ITError+0x252>
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b28      	cmp	r3, #40	; 0x28
 80047b6:	d110      	bne.n	80047da <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a0b      	ldr	r2, [pc, #44]	; (80047e8 <I2C_ITError+0x260>)
 80047bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7fe fe76 	bl	80034c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	08004b31 	.word	0x08004b31
 80047e8:	ffff0000 	.word	0xffff0000

080047ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	4608      	mov	r0, r1
 80047f6:	4611      	mov	r1, r2
 80047f8:	461a      	mov	r2, r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	817b      	strh	r3, [r7, #10]
 80047fe:	460b      	mov	r3, r1
 8004800:	813b      	strh	r3, [r7, #8]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	2200      	movs	r2, #0
 800481e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa2c 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483c:	d103      	bne.n	8004846 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e05f      	b.n	800490a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	492d      	ldr	r1, [pc, #180]	; (8004914 <I2C_RequestMemoryWrite+0x128>)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fa64 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e04c      	b.n	800490a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004888:	6a39      	ldr	r1, [r7, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 face 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e02b      	b.n	800490a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048b8:	893b      	ldrh	r3, [r7, #8]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]
 80048c2:	e021      	b.n	8004908 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048c4:	893b      	ldrh	r3, [r7, #8]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	6a39      	ldr	r1, [r7, #32]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 faa8 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d107      	bne.n	80048fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e005      	b.n	800490a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048fe:	893b      	ldrh	r3, [r7, #8]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	00010002 	.word	0x00010002

08004918 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004934:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800494a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	2200      	movs	r2, #0
 800495a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	2200      	movs	r2, #0
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004972:	2b21      	cmp	r3, #33	; 0x21
 8004974:	d007      	beq.n	8004986 <I2C_DMAXferCplt+0x6e>
 8004976:	7cfb      	ldrb	r3, [r7, #19]
 8004978:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800497c:	2b22      	cmp	r3, #34	; 0x22
 800497e:	d131      	bne.n	80049e4 <I2C_DMAXferCplt+0xcc>
 8004980:	7cbb      	ldrb	r3, [r7, #18]
 8004982:	2b20      	cmp	r3, #32
 8004984:	d12e      	bne.n	80049e4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004994:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	2b29      	cmp	r3, #41	; 0x29
 80049a0:	d10a      	bne.n	80049b8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2221      	movs	r2, #33	; 0x21
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2228      	movs	r2, #40	; 0x28
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049b0:	6978      	ldr	r0, [r7, #20]
 80049b2:	f7fe fd69 	bl	8003488 <HAL_I2C_SlaveTxCpltCallback>
 80049b6:	e00c      	b.n	80049d2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	2b2a      	cmp	r3, #42	; 0x2a
 80049bc:	d109      	bne.n	80049d2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2222      	movs	r2, #34	; 0x22
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2228      	movs	r2, #40	; 0x28
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049cc:	6978      	ldr	r0, [r7, #20]
 80049ce:	f7fe fd64 	bl	800349a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80049e0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049e2:	e06a      	b.n	8004aba <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d064      	beq.n	8004aba <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a08:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a18:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a20:	d009      	beq.n	8004a36 <I2C_DMAXferCplt+0x11e>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d006      	beq.n	8004a36 <I2C_DMAXferCplt+0x11e>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a2e:	d002      	beq.n	8004a36 <I2C_DMAXferCplt+0x11e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d107      	bne.n	8004a46 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a44:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a54:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a64:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004a74:	6978      	ldr	r0, [r7, #20]
 8004a76:	f7fe fd38 	bl	80034ea <HAL_I2C_ErrorCallback>
}
 8004a7a:	e01e      	b.n	8004aba <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d10a      	bne.n	8004aa6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004a9e:	6978      	ldr	r0, [r7, #20]
 8004aa0:	f7fe fd1a 	bl	80034d8 <HAL_I2C_MemRxCpltCallback>
}
 8004aa4:	e009      	b.n	8004aba <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2212      	movs	r2, #18
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ab4:	6978      	ldr	r0, [r7, #20]
 8004ab6:	f7fe fcde 	bl	8003476 <HAL_I2C_MasterRxCpltCallback>
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	2200      	movs	r2, #0
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	2200      	movs	r2, #0
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afe:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0210 	orr.w	r2, r3, #16
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7fe fce1 	bl	80034ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b4a:	4b4b      	ldr	r3, [pc, #300]	; (8004c78 <I2C_DMAAbort+0x148>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	4a4a      	ldr	r2, [pc, #296]	; (8004c7c <I2C_DMAAbort+0x14c>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	0a1a      	lsrs	r2, r3, #8
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00da      	lsls	r2, r3, #3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f043 0220 	orr.w	r2, r3, #32
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b76:	e00a      	b.n	8004b8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b8c:	d0ea      	beq.n	8004b64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	2200      	movs	r2, #0
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	2200      	movs	r2, #0
 8004be2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b60      	cmp	r3, #96	; 0x60
 8004bfe:	d10e      	bne.n	8004c1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7fe fc70 	bl	80034fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c1c:	e027      	b.n	8004c6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c24:	2b28      	cmp	r3, #40	; 0x28
 8004c26:	d117      	bne.n	8004c58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2228      	movs	r2, #40	; 0x28
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c56:	e007      	b.n	8004c68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f7fe fc3e 	bl	80034ea <HAL_I2C_ErrorCallback>
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	14f8b589 	.word	0x14f8b589

08004c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c90:	e025      	b.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d021      	beq.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9a:	f7fd f845 	bl	8001d28 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d116      	bne.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e023      	b.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d10d      	bne.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	e00c      	b.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf0c      	ite	eq
 8004d16:	2301      	moveq	r3, #1
 8004d18:	2300      	movne	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d0b6      	beq.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d3c:	e051      	b.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4c:	d123      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f043 0204 	orr.w	r2, r3, #4
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e046      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d021      	beq.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fc ffc3 	bl	8001d28 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d116      	bne.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e020      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d10c      	bne.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	43da      	mvns	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf14      	ite	ne
 8004dfe:	2301      	movne	r3, #1
 8004e00:	2300      	moveq	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	e00b      	b.n	8004e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	43da      	mvns	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d18d      	bne.n	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e38:	e02d      	b.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f86a 	bl	8004f14 <I2C_IsAcknowledgeFailed>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e02d      	b.n	8004ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d021      	beq.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fc ff69 	bl	8001d28 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d116      	bne.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e007      	b.n	8004ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d1ca      	bne.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	08db      	lsrs	r3, r3, #3
 8004ec2:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	0a1a      	lsrs	r2, r3, #8
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d107      	bne.n	8004eee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e008      	b.n	8004f00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efc:	d0e9      	beq.n	8004ed2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	14f8b589 	.word	0x14f8b589

08004f14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d11b      	bne.n	8004f64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f043 0204 	orr.w	r2, r3, #4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f80:	d103      	bne.n	8004f8a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f88:	e007      	b.n	8004f9a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f92:	d102      	bne.n	8004f9a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2208      	movs	r2, #8
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e272      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8087 	beq.w	80050d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fc4:	4b92      	ldr	r3, [pc, #584]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d00c      	beq.n	8004fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fd0:	4b8f      	ldr	r3, [pc, #572]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d112      	bne.n	8005002 <HAL_RCC_OscConfig+0x5e>
 8004fdc:	4b8c      	ldr	r3, [pc, #560]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe8:	d10b      	bne.n	8005002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fea:	4b89      	ldr	r3, [pc, #548]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d06c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x12c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d168      	bne.n	80050d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e24c      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x76>
 800500c:	4b80      	ldr	r3, [pc, #512]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a7f      	ldr	r2, [pc, #508]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	e02e      	b.n	8005078 <HAL_RCC_OscConfig+0xd4>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x98>
 8005022:	4b7b      	ldr	r3, [pc, #492]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a7a      	ldr	r2, [pc, #488]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b78      	ldr	r3, [pc, #480]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a77      	ldr	r2, [pc, #476]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e01d      	b.n	8005078 <HAL_RCC_OscConfig+0xd4>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005044:	d10c      	bne.n	8005060 <HAL_RCC_OscConfig+0xbc>
 8005046:	4b72      	ldr	r3, [pc, #456]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a71      	ldr	r2, [pc, #452]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 800504c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b6f      	ldr	r3, [pc, #444]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e00b      	b.n	8005078 <HAL_RCC_OscConfig+0xd4>
 8005060:	4b6b      	ldr	r3, [pc, #428]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a6a      	ldr	r2, [pc, #424]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4b68      	ldr	r3, [pc, #416]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a67      	ldr	r2, [pc, #412]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d013      	beq.n	80050a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005080:	f7fc fe52 	bl	8001d28 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005088:	f7fc fe4e 	bl	8001d28 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	; 0x64
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e200      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	4b5d      	ldr	r3, [pc, #372]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0xe4>
 80050a6:	e014      	b.n	80050d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fc fe3e 	bl	8001d28 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fc fe3a 	bl	8001d28 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1ec      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c2:	4b53      	ldr	r3, [pc, #332]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x10c>
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d063      	beq.n	80051a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050de:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050ea:	4b49      	ldr	r3, [pc, #292]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d11c      	bne.n	8005130 <HAL_RCC_OscConfig+0x18c>
 80050f6:	4b46      	ldr	r3, [pc, #280]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d116      	bne.n	8005130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005102:	4b43      	ldr	r3, [pc, #268]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_RCC_OscConfig+0x176>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d001      	beq.n	800511a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e1c0      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511a:	4b3d      	ldr	r3, [pc, #244]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4939      	ldr	r1, [pc, #228]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512e:	e03a      	b.n	80051a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d020      	beq.n	800517a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005138:	4b36      	ldr	r3, [pc, #216]	; (8005214 <HAL_RCC_OscConfig+0x270>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513e:	f7fc fdf3 	bl	8001d28 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005146:	f7fc fdef 	bl	8001d28 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e1a1      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005158:	4b2d      	ldr	r3, [pc, #180]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005164:	4b2a      	ldr	r3, [pc, #168]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4927      	ldr	r1, [pc, #156]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]
 8005178:	e015      	b.n	80051a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517a:	4b26      	ldr	r3, [pc, #152]	; (8005214 <HAL_RCC_OscConfig+0x270>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7fc fdd2 	bl	8001d28 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005188:	f7fc fdce 	bl	8001d28 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e180      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519a:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03a      	beq.n	8005228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d019      	beq.n	80051ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ba:	4b17      	ldr	r3, [pc, #92]	; (8005218 <HAL_RCC_OscConfig+0x274>)
 80051bc:	2201      	movs	r2, #1
 80051be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c0:	f7fc fdb2 	bl	8001d28 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c8:	f7fc fdae 	bl	8001d28 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e160      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051da:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <HAL_RCC_OscConfig+0x26c>)
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051e6:	2001      	movs	r0, #1
 80051e8:	f000 faf8 	bl	80057dc <RCC_Delay>
 80051ec:	e01c      	b.n	8005228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_RCC_OscConfig+0x274>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f4:	f7fc fd98 	bl	8001d28 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051fa:	e00f      	b.n	800521c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051fc:	f7fc fd94 	bl	8001d28 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d908      	bls.n	800521c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e146      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
 8005214:	42420000 	.word	0x42420000
 8005218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800521c:	4b92      	ldr	r3, [pc, #584]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e9      	bne.n	80051fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80a6 	beq.w	8005382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523a:	4b8b      	ldr	r3, [pc, #556]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10d      	bne.n	8005262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	4b88      	ldr	r3, [pc, #544]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4a87      	ldr	r2, [pc, #540]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005250:	61d3      	str	r3, [r2, #28]
 8005252:	4b85      	ldr	r3, [pc, #532]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005262:	4b82      	ldr	r3, [pc, #520]	; (800546c <HAL_RCC_OscConfig+0x4c8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d118      	bne.n	80052a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800526e:	4b7f      	ldr	r3, [pc, #508]	; (800546c <HAL_RCC_OscConfig+0x4c8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a7e      	ldr	r2, [pc, #504]	; (800546c <HAL_RCC_OscConfig+0x4c8>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527a:	f7fc fd55 	bl	8001d28 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7fc fd51 	bl	8001d28 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b64      	cmp	r3, #100	; 0x64
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e103      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	4b75      	ldr	r3, [pc, #468]	; (800546c <HAL_RCC_OscConfig+0x4c8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x312>
 80052a8:	4b6f      	ldr	r3, [pc, #444]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	4a6e      	ldr	r2, [pc, #440]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6213      	str	r3, [r2, #32]
 80052b4:	e02d      	b.n	8005312 <HAL_RCC_OscConfig+0x36e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x334>
 80052be:	4b6a      	ldr	r3, [pc, #424]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4a69      	ldr	r2, [pc, #420]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6213      	str	r3, [r2, #32]
 80052ca:	4b67      	ldr	r3, [pc, #412]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	4a66      	ldr	r2, [pc, #408]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	6213      	str	r3, [r2, #32]
 80052d6:	e01c      	b.n	8005312 <HAL_RCC_OscConfig+0x36e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b05      	cmp	r3, #5
 80052de:	d10c      	bne.n	80052fa <HAL_RCC_OscConfig+0x356>
 80052e0:	4b61      	ldr	r3, [pc, #388]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	4a60      	ldr	r2, [pc, #384]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	6213      	str	r3, [r2, #32]
 80052ec:	4b5e      	ldr	r3, [pc, #376]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	4a5d      	ldr	r2, [pc, #372]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6213      	str	r3, [r2, #32]
 80052f8:	e00b      	b.n	8005312 <HAL_RCC_OscConfig+0x36e>
 80052fa:	4b5b      	ldr	r3, [pc, #364]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4a5a      	ldr	r2, [pc, #360]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	6213      	str	r3, [r2, #32]
 8005306:	4b58      	ldr	r3, [pc, #352]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	4a57      	ldr	r2, [pc, #348]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 800530c:	f023 0304 	bic.w	r3, r3, #4
 8005310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d015      	beq.n	8005346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531a:	f7fc fd05 	bl	8001d28 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005320:	e00a      	b.n	8005338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fc fd01 	bl	8001d28 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e0b1      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005338:	4b4b      	ldr	r3, [pc, #300]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ee      	beq.n	8005322 <HAL_RCC_OscConfig+0x37e>
 8005344:	e014      	b.n	8005370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005346:	f7fc fcef 	bl	8001d28 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fc fceb 	bl	8001d28 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	; 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e09b      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005364:	4b40      	ldr	r3, [pc, #256]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ee      	bne.n	800534e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d105      	bne.n	8005382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005376:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	4a3b      	ldr	r2, [pc, #236]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8087 	beq.w	800549a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800538c:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b08      	cmp	r3, #8
 8005396:	d061      	beq.n	800545c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d146      	bne.n	800542e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a0:	4b33      	ldr	r3, [pc, #204]	; (8005470 <HAL_RCC_OscConfig+0x4cc>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a6:	f7fc fcbf 	bl	8001d28 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ae:	f7fc fcbb 	bl	8001d28 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e06d      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f0      	bne.n	80053ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d108      	bne.n	80053e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053d6:	4b24      	ldr	r3, [pc, #144]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	4921      	ldr	r1, [pc, #132]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e8:	4b1f      	ldr	r3, [pc, #124]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a19      	ldr	r1, [r3, #32]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	430b      	orrs	r3, r1
 80053fa:	491b      	ldr	r1, [pc, #108]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005400:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <HAL_RCC_OscConfig+0x4cc>)
 8005402:	2201      	movs	r2, #1
 8005404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005406:	f7fc fc8f 	bl	8001d28 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540e:	f7fc fc8b 	bl	8001d28 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e03d      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005420:	4b11      	ldr	r3, [pc, #68]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x46a>
 800542c:	e035      	b.n	800549a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <HAL_RCC_OscConfig+0x4cc>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fc fc78 	bl	8001d28 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543c:	f7fc fc74 	bl	8001d28 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e026      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800544e:	4b06      	ldr	r3, [pc, #24]	; (8005468 <HAL_RCC_OscConfig+0x4c4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x498>
 800545a:	e01e      	b.n	800549a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d107      	bne.n	8005474 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e019      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
 8005468:	40021000 	.word	0x40021000
 800546c:	40007000 	.word	0x40007000
 8005470:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCC_OscConfig+0x500>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	429a      	cmp	r2, r3
 8005486:	d106      	bne.n	8005496 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d001      	beq.n	800549a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000

080054a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0d0      	b.n	800565e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054bc:	4b6a      	ldr	r3, [pc, #424]	; (8005668 <HAL_RCC_ClockConfig+0x1c0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d910      	bls.n	80054ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ca:	4b67      	ldr	r3, [pc, #412]	; (8005668 <HAL_RCC_ClockConfig+0x1c0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 0207 	bic.w	r2, r3, #7
 80054d2:	4965      	ldr	r1, [pc, #404]	; (8005668 <HAL_RCC_ClockConfig+0x1c0>)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054da:	4b63      	ldr	r3, [pc, #396]	; (8005668 <HAL_RCC_ClockConfig+0x1c0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0b8      	b.n	800565e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d020      	beq.n	800553a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005504:	4b59      	ldr	r3, [pc, #356]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4a58      	ldr	r2, [pc, #352]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 800550a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800550e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800551c:	4b53      	ldr	r3, [pc, #332]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a52      	ldr	r2, [pc, #328]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005522:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005526:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005528:	4b50      	ldr	r3, [pc, #320]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	494d      	ldr	r1, [pc, #308]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d040      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d107      	bne.n	800555e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	4b47      	ldr	r3, [pc, #284]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d115      	bne.n	8005586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e07f      	b.n	800565e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d107      	bne.n	8005576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005566:	4b41      	ldr	r3, [pc, #260]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e073      	b.n	800565e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005576:	4b3d      	ldr	r3, [pc, #244]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e06b      	b.n	800565e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005586:	4b39      	ldr	r3, [pc, #228]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f023 0203 	bic.w	r2, r3, #3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	4936      	ldr	r1, [pc, #216]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005598:	f7fc fbc6 	bl	8001d28 <HAL_GetTick>
 800559c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559e:	e00a      	b.n	80055b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a0:	f7fc fbc2 	bl	8001d28 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e053      	b.n	800565e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b6:	4b2d      	ldr	r3, [pc, #180]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 020c 	and.w	r2, r3, #12
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d1eb      	bne.n	80055a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055c8:	4b27      	ldr	r3, [pc, #156]	; (8005668 <HAL_RCC_ClockConfig+0x1c0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d210      	bcs.n	80055f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b24      	ldr	r3, [pc, #144]	; (8005668 <HAL_RCC_ClockConfig+0x1c0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 0207 	bic.w	r2, r3, #7
 80055de:	4922      	ldr	r1, [pc, #136]	; (8005668 <HAL_RCC_ClockConfig+0x1c0>)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b20      	ldr	r3, [pc, #128]	; (8005668 <HAL_RCC_ClockConfig+0x1c0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e032      	b.n	800565e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005604:	4b19      	ldr	r3, [pc, #100]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4916      	ldr	r1, [pc, #88]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	490e      	ldr	r1, [pc, #56]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	4313      	orrs	r3, r2
 8005634:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005636:	f000 f82d 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 800563a:	4602      	mov	r2, r0
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	490a      	ldr	r1, [pc, #40]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005648:	5ccb      	ldrb	r3, [r1, r3]
 800564a:	fa22 f303 	lsr.w	r3, r2, r3
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <HAL_RCC_ClockConfig+0x1cc>)
 8005650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <HAL_RCC_ClockConfig+0x1d0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fc fb24 	bl	8001ca4 <HAL_InitTick>

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40022000 	.word	0x40022000
 800566c:	40021000 	.word	0x40021000
 8005670:	08007d94 	.word	0x08007d94
 8005674:	20000000 	.word	0x20000000
 8005678:	20000010 	.word	0x20000010

0800567c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005680:	4b03      	ldr	r3, [pc, #12]	; (8005690 <HAL_RCC_EnableCSS+0x14>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	4242004c 	.word	0x4242004c

08005694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005694:	b490      	push	{r4, r7}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800569a:	4b29      	ldr	r3, [pc, #164]	; (8005740 <HAL_RCC_GetSysClockFreq+0xac>)
 800569c:	1d3c      	adds	r4, r7, #4
 800569e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056a4:	f240 2301 	movw	r3, #513	; 0x201
 80056a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	2300      	movs	r3, #0
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056be:	4b21      	ldr	r3, [pc, #132]	; (8005744 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d002      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x40>
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d003      	beq.n	80056da <HAL_RCC_GetSysClockFreq+0x46>
 80056d2:	e02b      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056d4:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056d6:	623b      	str	r3, [r7, #32]
      break;
 80056d8:	e02b      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	0c9b      	lsrs	r3, r3, #18
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	3328      	adds	r3, #40	; 0x28
 80056e4:	443b      	add	r3, r7
 80056e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80056ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d012      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056f6:	4b13      	ldr	r3, [pc, #76]	; (8005744 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	0c5b      	lsrs	r3, r3, #17
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	3328      	adds	r3, #40	; 0x28
 8005702:	443b      	add	r3, r7
 8005704:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005708:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb4>)
 800570e:	fb03 f202 	mul.w	r2, r3, r2
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
 800571a:	e004      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4a0b      	ldr	r2, [pc, #44]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005720:	fb02 f303 	mul.w	r3, r2, r3
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	623b      	str	r3, [r7, #32]
      break;
 800572a:	e002      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb4>)
 800572e:	623b      	str	r3, [r7, #32]
      break;
 8005730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005732:	6a3b      	ldr	r3, [r7, #32]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3728      	adds	r7, #40	; 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	bc90      	pop	{r4, r7}
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	08007d84 	.word	0x08007d84
 8005744:	40021000 	.word	0x40021000
 8005748:	007a1200 	.word	0x007a1200
 800574c:	003d0900 	.word	0x003d0900

08005750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <HAL_RCC_GetHCLKFreq+0x10>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	20000000 	.word	0x20000000

08005764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005768:	f7ff fff2 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 800576c:	4602      	mov	r2, r0
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4903      	ldr	r1, [pc, #12]	; (8005788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800577a:	5ccb      	ldrb	r3, [r1, r3]
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40021000 	.word	0x40021000
 8005788:	08007da4 	.word	0x08007da4

0800578c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005790:	f7ff ffde 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	0adb      	lsrs	r3, r3, #11
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	; (80057b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000
 80057b0:	08007da4 	.word	0x08007da4

080057b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d104      	bne.n	80057ce <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80057c4:	f000 f828 	bl	8005818 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80057ca:	2280      	movs	r2, #128	; 0x80
 80057cc:	701a      	strb	r2, [r3, #0]
  }
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40021000 	.word	0x40021000
 80057d8:	4002100a 	.word	0x4002100a

080057dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <RCC_Delay+0x34>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <RCC_Delay+0x38>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	0a5b      	lsrs	r3, r3, #9
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057f8:	bf00      	nop
  }
  while (Delay --);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	60fa      	str	r2, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f9      	bne.n	80057f8 <RCC_Delay+0x1c>
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr
 8005810:	20000000 	.word	0x20000000
 8005814:	10624dd3 	.word	0x10624dd3

08005818 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800581c:	bf00      	nop
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e041      	b.n	80058ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fb fb9a 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fc44 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e041      	b.n	8005958 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f839 	bl	8005960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f000 fbf5 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
	...

08005974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d109      	bne.n	8005998 <HAL_TIM_PWM_Start+0x24>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e022      	b.n	80059de <HAL_TIM_PWM_Start+0x6a>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d109      	bne.n	80059b2 <HAL_TIM_PWM_Start+0x3e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	e015      	b.n	80059de <HAL_TIM_PWM_Start+0x6a>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d109      	bne.n	80059cc <HAL_TIM_PWM_Start+0x58>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e008      	b.n	80059de <HAL_TIM_PWM_Start+0x6a>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e05e      	b.n	8005aa4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Start+0x82>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f4:	e013      	b.n	8005a1e <HAL_TIM_PWM_Start+0xaa>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_PWM_Start+0x92>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a04:	e00b      	b.n	8005a1e <HAL_TIM_PWM_Start+0xaa>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_PWM_Start+0xa2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a14:	e003      	b.n	8005a1e <HAL_TIM_PWM_Start+0xaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fde2 	bl	80065f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <HAL_TIM_PWM_Start+0x138>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d107      	bne.n	8005a46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a18      	ldr	r2, [pc, #96]	; (8005aac <HAL_TIM_PWM_Start+0x138>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_TIM_PWM_Start+0xfa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a58:	d009      	beq.n	8005a6e <HAL_TIM_PWM_Start+0xfa>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <HAL_TIM_PWM_Start+0x13c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_TIM_PWM_Start+0xfa>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a12      	ldr	r2, [pc, #72]	; (8005ab4 <HAL_TIM_PWM_Start+0x140>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d111      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d010      	beq.n	8005aa2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	e007      	b.n	8005aa2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800

08005ab8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fd90 	bl	80065f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a29      	ldr	r2, [pc, #164]	; (8005b7c <HAL_TIM_PWM_Stop+0xc4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d117      	bne.n	8005b0a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10f      	bne.n	8005b0a <HAL_TIM_PWM_Stop+0x52>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6a1a      	ldr	r2, [r3, #32]
 8005af0:	f240 4344 	movw	r3, #1092	; 0x444
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <HAL_TIM_PWM_Stop+0x52>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a1a      	ldr	r2, [r3, #32]
 8005b10:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10f      	bne.n	8005b3a <HAL_TIM_PWM_Stop+0x82>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6a1a      	ldr	r2, [r3, #32]
 8005b20:	f240 4344 	movw	r3, #1092	; 0x444
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d107      	bne.n	8005b3a <HAL_TIM_PWM_Stop+0x82>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_PWM_Stop+0x92>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b48:	e013      	b.n	8005b72 <HAL_TIM_PWM_Stop+0xba>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIM_PWM_Stop+0xa2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b58:	e00b      	b.n	8005b72 <HAL_TIM_PWM_Stop+0xba>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_PWM_Stop+0xb2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b68:	e003      	b.n	8005b72 <HAL_TIM_PWM_Stop+0xba>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40012c00 	.word	0x40012c00

08005b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0202 	mvn.w	r2, #2
 8005bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa78 	bl	80060b8 <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa6b 	bl	80060a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fa7a 	bl	80060ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d122      	bne.n	8005c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d11b      	bne.n	8005c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0204 	mvn.w	r2, #4
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa4e 	bl	80060b8 <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fa41 	bl	80060a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa50 	bl	80060ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d122      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d11b      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0208 	mvn.w	r2, #8
 8005c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa24 	bl	80060b8 <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fa17 	bl	80060a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fa26 	bl	80060ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b10      	cmp	r3, #16
 8005c90:	d122      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d11b      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0210 	mvn.w	r2, #16
 8005ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2208      	movs	r2, #8
 8005cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f9fa 	bl	80060b8 <HAL_TIM_IC_CaptureCallback>
 8005cc4:	e005      	b.n	8005cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f9ed 	bl	80060a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f9fc 	bl	80060ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d10e      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d107      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0201 	mvn.w	r2, #1
 8005cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f9c8 	bl	8006094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0e:	2b80      	cmp	r3, #128	; 0x80
 8005d10:	d10e      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	d107      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fceb 	bl	8006706 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d10e      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d107      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f9c0 	bl	80060dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d10e      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d107      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0220 	mvn.w	r2, #32
 8005d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fcb6 	bl	80066f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d88:	bf00      	nop
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e0ac      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	f200 809f 	bhi.w	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005df5 	.word	0x08005df5
 8005dc4:	08005ef9 	.word	0x08005ef9
 8005dc8:	08005ef9 	.word	0x08005ef9
 8005dcc:	08005ef9 	.word	0x08005ef9
 8005dd0:	08005e35 	.word	0x08005e35
 8005dd4:	08005ef9 	.word	0x08005ef9
 8005dd8:	08005ef9 	.word	0x08005ef9
 8005ddc:	08005ef9 	.word	0x08005ef9
 8005de0:	08005e77 	.word	0x08005e77
 8005de4:	08005ef9 	.word	0x08005ef9
 8005de8:	08005ef9 	.word	0x08005ef9
 8005dec:	08005ef9 	.word	0x08005ef9
 8005df0:	08005eb7 	.word	0x08005eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f9da 	bl	80061b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0208 	orr.w	r2, r2, #8
 8005e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0204 	bic.w	r2, r2, #4
 8005e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	619a      	str	r2, [r3, #24]
      break;
 8005e32:	e062      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fa20 	bl	8006280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6999      	ldr	r1, [r3, #24]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	619a      	str	r2, [r3, #24]
      break;
 8005e74:	e041      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fa69 	bl	8006354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0208 	orr.w	r2, r2, #8
 8005e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0204 	bic.w	r2, r2, #4
 8005ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69d9      	ldr	r1, [r3, #28]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	61da      	str	r2, [r3, #28]
      break;
 8005eb4:	e021      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fab3 	bl	8006428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69d9      	ldr	r1, [r3, #28]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	021a      	lsls	r2, r3, #8
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	61da      	str	r2, [r3, #28]
      break;
 8005ef6:	e000      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIM_ConfigClockSource+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e0b3      	b.n	800608c <HAL_TIM_ConfigClockSource+0x180>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5c:	d03e      	beq.n	8005fdc <HAL_TIM_ConfigClockSource+0xd0>
 8005f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f62:	f200 8087 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x168>
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6a:	f000 8085 	beq.w	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	d87f      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x168>
 8005f74:	2b70      	cmp	r3, #112	; 0x70
 8005f76:	d01a      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0xa2>
 8005f78:	2b70      	cmp	r3, #112	; 0x70
 8005f7a:	d87b      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x168>
 8005f7c:	2b60      	cmp	r3, #96	; 0x60
 8005f7e:	d050      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x116>
 8005f80:	2b60      	cmp	r3, #96	; 0x60
 8005f82:	d877      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x168>
 8005f84:	2b50      	cmp	r3, #80	; 0x50
 8005f86:	d03c      	beq.n	8006002 <HAL_TIM_ConfigClockSource+0xf6>
 8005f88:	2b50      	cmp	r3, #80	; 0x50
 8005f8a:	d873      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x168>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d058      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x136>
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d86f      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x168>
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d064      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x156>
 8005f98:	2b30      	cmp	r3, #48	; 0x30
 8005f9a:	d86b      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x168>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d060      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x156>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d867      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x168>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d05c      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x156>
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d05a      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005fac:	e062      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6899      	ldr	r1, [r3, #8]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f000 faf8 	bl	80065b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	609a      	str	r2, [r3, #8]
      break;
 8005fda:	e04e      	b.n	800607a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	6899      	ldr	r1, [r3, #8]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f000 fae1 	bl	80065b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ffe:	609a      	str	r2, [r3, #8]
      break;
 8006000:	e03b      	b.n	800607a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6859      	ldr	r1, [r3, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	461a      	mov	r2, r3
 8006010:	f000 fa58 	bl	80064c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2150      	movs	r1, #80	; 0x50
 800601a:	4618      	mov	r0, r3
 800601c:	f000 faaf 	bl	800657e <TIM_ITRx_SetConfig>
      break;
 8006020:	e02b      	b.n	800607a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	461a      	mov	r2, r3
 8006030:	f000 fa76 	bl	8006520 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2160      	movs	r1, #96	; 0x60
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fa9f 	bl	800657e <TIM_ITRx_SetConfig>
      break;
 8006040:	e01b      	b.n	800607a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	461a      	mov	r2, r3
 8006050:	f000 fa38 	bl	80064c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2140      	movs	r1, #64	; 0x40
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fa8f 	bl	800657e <TIM_ITRx_SetConfig>
      break;
 8006060:	e00b      	b.n	800607a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f000 fa86 	bl	800657e <TIM_ITRx_SetConfig>
        break;
 8006072:	e002      	b.n	800607a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006078:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr
	...

080060f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a29      	ldr	r2, [pc, #164]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00b      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d007      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a26      	ldr	r2, [pc, #152]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <TIM_Base_SetConfig+0xc0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d108      	bne.n	8006132 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1c      	ldr	r2, [pc, #112]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006140:	d007      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a19      	ldr	r2, [pc, #100]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <TIM_Base_SetConfig+0xc0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d103      	bne.n	8006198 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	615a      	str	r2, [r3, #20]
}
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800

080061b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f023 0201 	bic.w	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0303 	bic.w	r3, r3, #3
 80061ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 0302 	bic.w	r3, r3, #2
 80061fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a1c      	ldr	r2, [pc, #112]	; (800627c <TIM_OC1_SetConfig+0xc8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10c      	bne.n	800622a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0308 	bic.w	r3, r3, #8
 8006216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 0304 	bic.w	r3, r3, #4
 8006228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a13      	ldr	r2, [pc, #76]	; (800627c <TIM_OC1_SetConfig+0xc8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d111      	bne.n	8006256 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00

08006280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0210 	bic.w	r2, r3, #16
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0320 	bic.w	r3, r3, #32
 80062ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1d      	ldr	r2, [pc, #116]	; (8006350 <TIM_OC2_SetConfig+0xd0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10d      	bne.n	80062fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a14      	ldr	r2, [pc, #80]	; (8006350 <TIM_OC2_SetConfig+0xd0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d113      	bne.n	800632c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800630a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr
 8006350:	40012c00 	.word	0x40012c00

08006354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800639c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <TIM_OC3_SetConfig+0xd0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10d      	bne.n	80063ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a14      	ldr	r2, [pc, #80]	; (8006424 <TIM_OC3_SetConfig+0xd0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d113      	bne.n	80063fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	bc80      	pop	{r7}
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40012c00 	.word	0x40012c00

08006428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	031b      	lsls	r3, r3, #12
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a0f      	ldr	r2, [pc, #60]	; (80064c0 <TIM_OC4_SetConfig+0x98>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d109      	bne.n	800649c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800648e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	019b      	lsls	r3, r3, #6
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	40012c00 	.word	0x40012c00

080064c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f023 0201 	bic.w	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 030a 	bic.w	r3, r3, #10
 8006500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	621a      	str	r2, [r3, #32]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f023 0210 	bic.w	r2, r3, #16
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800654a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	031b      	lsls	r3, r3, #12
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800655c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr

0800657e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	f043 0307 	orr.w	r3, r3, #7
 80065a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	609a      	str	r2, [r3, #8]
}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b087      	sub	sp, #28
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	021a      	lsls	r2, r3, #8
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	4313      	orrs	r3, r2
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	609a      	str	r2, [r3, #8]
}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr

080065f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2201      	movs	r2, #1
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	43db      	mvns	r3, r3
 8006612:	401a      	ands	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1a      	ldr	r2, [r3, #32]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	fa01 f303 	lsl.w	r3, r1, r3
 8006628:	431a      	orrs	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800664c:	2302      	movs	r3, #2
 800664e:	e046      	b.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669c:	d009      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a12      	ldr	r2, [pc, #72]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a10      	ldr	r2, [pc, #64]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d10c      	bne.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr
 80066e8:	40012c00 	.word	0x40012c00
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800

080066f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e04a      	b.n	80067c0 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d111      	bne.n	800675a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fadc 	bl	8006cfc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a1e      	ldr	r2, [pc, #120]	; (80067c8 <HAL_UART_Init+0xb0>)
 8006750:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2224      	movs	r2, #36	; 0x24
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006770:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fdb4 	bl	80072e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006786:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006796:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	080010e9 	.word	0x080010e9

080067cc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d13c      	bne.n	8006860 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e035      	b.n	8006862 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8006800:	2302      	movs	r3, #2
 8006802:	e02e      	b.n	8006862 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	461a      	mov	r2, r3
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fb5a 	bl	8006ed2 <UART_Start_Receive_IT>
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d119      	bne.n	800685c <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	2b01      	cmp	r3, #1
 800682e:	d113      	bne.n	8006858 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0210 	orr.w	r2, r2, #16
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	e001      	b.n	800685c <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	e000      	b.n	8006862 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 8006860:	2302      	movs	r3, #2
  }
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	4613      	mov	r3, r2
 8006876:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b20      	cmp	r3, #32
 8006882:	d13c      	bne.n	80068fe <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e035      	b.n	8006900 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800689e:	2302      	movs	r3, #2
 80068a0:	e02e      	b.n	8006900 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80068b0:	88fb      	ldrh	r3, [r7, #6]
 80068b2:	461a      	mov	r2, r3
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fb44 	bl	8006f44 <UART_Start_Receive_DMA>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d119      	bne.n	80068fa <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d113      	bne.n	80068f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068ce:	2300      	movs	r3, #0
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0210 	orr.w	r2, r2, #16
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	e001      	b.n	80068fa <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	e000      	b.n	8006900 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80068fe:	2302      	movs	r3, #2
  }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006928:	2300      	movs	r3, #0
 800692a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10d      	bne.n	800695a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <HAL_UART_IRQHandler+0x52>
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fc18 	bl	8007188 <UART_Receive_IT>
      return;
 8006958:	e180      	b.n	8006c5c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80b4 	beq.w	8006aca <HAL_UART_IRQHandler+0x1c2>
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d105      	bne.n	8006978 <HAL_UART_IRQHandler+0x70>
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80a9 	beq.w	8006aca <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_UART_IRQHandler+0x90>
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	f043 0201 	orr.w	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <HAL_UART_IRQHandler+0xb0>
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	f043 0202 	orr.w	r2, r3, #2
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <HAL_UART_IRQHandler+0xd0>
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	f043 0204 	orr.w	r2, r3, #4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00f      	beq.n	8006a02 <HAL_UART_IRQHandler+0xfa>
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <HAL_UART_IRQHandler+0xee>
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f043 0208 	orr.w	r2, r3, #8
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8123 	beq.w	8006c52 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <HAL_UART_IRQHandler+0x11e>
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fbb1 	bl	8007188 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <HAL_UART_IRQHandler+0x146>
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d033      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 faf1 	bl	8007036 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d024      	beq.n	8006aac <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d013      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	4a79      	ldr	r2, [pc, #484]	; (8006c64 <HAL_UART_IRQHandler+0x35c>)
 8006a80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fb fb7e 	bl	8002188 <HAL_DMA_Abort_IT>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d019      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	e011      	b.n	8006ac6 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aaa:	e00c      	b.n	8006ac6 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab4:	e007      	b.n	8006ac6 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ac4:	e0c5      	b.n	8006c52 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac6:	bf00      	nop
    return;
 8006ac8:	e0c3      	b.n	8006c52 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	f040 80a3 	bne.w	8006c1a <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 809d 	beq.w	8006c1a <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8097 	beq.w	8006c1a <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d04f      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006b1a:	8a3b      	ldrh	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 809a 	beq.w	8006c56 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b26:	8a3a      	ldrh	r2, [r7, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	f080 8094 	bcs.w	8006c56 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8a3a      	ldrh	r2, [r7, #16]
 8006b32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d02b      	beq.n	8006b96 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b4c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b6c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0210 	bic.w	r2, r2, #16
 8006b8a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fb fabe 	bl	8002112 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006ba2:	b292      	uxth	r2, r2
 8006ba4:	1a8a      	subs	r2, r1, r2
 8006ba6:	b292      	uxth	r2, r2
 8006ba8:	4611      	mov	r1, r2
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8006bae:	e052      	b.n	8006c56 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d048      	beq.n	8006c5a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8006bc8:	8a7b      	ldrh	r3, [r7, #18]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d045      	beq.n	8006c5a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bdc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0210 	bic.w	r2, r2, #16
 8006c0a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c10:	8a7a      	ldrh	r2, [r7, #18]
 8006c12:	4611      	mov	r1, r2
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8006c18:	e01f      	b.n	8006c5a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_UART_IRQHandler+0x32e>
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa42 	bl	80070b8 <UART_Transmit_IT>
    return;
 8006c34:	e012      	b.n	8006c5c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00d      	beq.n	8006c5c <HAL_UART_IRQHandler+0x354>
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa83 	bl	8007156 <UART_EndTransmit_IT>
    return;
 8006c50:	e004      	b.n	8006c5c <HAL_UART_IRQHandler+0x354>
    return;
 8006c52:	bf00      	nop
 8006c54:	e002      	b.n	8006c5c <HAL_UART_IRQHandler+0x354>
      return;
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <HAL_UART_IRQHandler+0x354>
      return;
 8006c5a:	bf00      	nop
  }
}
 8006c5c:	3728      	adds	r7, #40	; 0x28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	0800708f 	.word	0x0800708f

08006c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr

08006c7a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a0f      	ldr	r2, [pc, #60]	; (8006d44 <UART_InitCallbacksToDefault+0x48>)
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a0e      	ldr	r2, [pc, #56]	; (8006d48 <UART_InitCallbacksToDefault+0x4c>)
 8006d0e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a0e      	ldr	r2, [pc, #56]	; (8006d4c <UART_InitCallbacksToDefault+0x50>)
 8006d14:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a0d      	ldr	r2, [pc, #52]	; (8006d50 <UART_InitCallbacksToDefault+0x54>)
 8006d1a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a0d      	ldr	r2, [pc, #52]	; (8006d54 <UART_InitCallbacksToDefault+0x58>)
 8006d20:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <UART_InitCallbacksToDefault+0x5c>)
 8006d26:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a0c      	ldr	r2, [pc, #48]	; (8006d5c <UART_InitCallbacksToDefault+0x60>)
 8006d2c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a0b      	ldr	r2, [pc, #44]	; (8006d60 <UART_InitCallbacksToDefault+0x64>)
 8006d32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a0b      	ldr	r2, [pc, #44]	; (8006d64 <UART_InitCallbacksToDefault+0x68>)
 8006d38:	669a      	str	r2, [r3, #104]	; 0x68

}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr
 8006d44:	08006c7b 	.word	0x08006c7b
 8006d48:	08006c69 	.word	0x08006c69
 8006d4c:	08006c8d 	.word	0x08006c8d
 8006d50:	080003a5 	.word	0x080003a5
 8006d54:	08006c9f 	.word	0x08006c9f
 8006d58:	08006cb1 	.word	0x08006cb1
 8006d5c:	08006cc3 	.word	0x08006cc3
 8006d60:	08006cd5 	.word	0x08006cd5
 8006d64:	08006ce7 	.word	0x08006ce7

08006d68 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d12a      	bne.n	8006dda <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d98:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695a      	ldr	r2, [r3, #20]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0201 	bic.w	r2, r2, #1
 8006da8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695a      	ldr	r2, [r3, #20]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d107      	bne.n	8006dda <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0210 	bic.w	r2, r2, #16
 8006dd8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d107      	bne.n	8006df2 <UART_DMAReceiveCplt+0x8a>
  {  
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006dea:	4611      	mov	r1, r2
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006df0:	e003      	b.n	8006dfa <UART_DMAReceiveCplt+0x92>
    huart->RxCpltCallback(huart);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	4798      	blx	r3
}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d109      	bne.n	8006e2c <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006e20:	0852      	lsrs	r2, r2, #1
 8006e22:	b292      	uxth	r2, r2
 8006e24:	4611      	mov	r1, r2
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e2a:	e003      	b.n	8006e34 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	4798      	blx	r3
}
 8006e34:	bf00      	nop
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bf14      	ite	ne
 8006e5c:	2301      	movne	r3, #1
 8006e5e:	2300      	moveq	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b21      	cmp	r3, #33	; 0x21
 8006e6e:	d108      	bne.n	8006e82 <UART_DMAError+0x46>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e7c:	68b8      	ldr	r0, [r7, #8]
 8006e7e:	f000 f8c5 	bl	800700c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bf14      	ite	ne
 8006e90:	2301      	movne	r3, #1
 8006e92:	2300      	moveq	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b22      	cmp	r3, #34	; 0x22
 8006ea2:	d108      	bne.n	8006eb6 <UART_DMAError+0x7a>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d005      	beq.n	8006eb6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006eb0:	68b8      	ldr	r0, [r7, #8]
 8006eb2:	f000 f8c0 	bl	8007036 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f043 0210 	orr.w	r2, r3, #16
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec6:	68b8      	ldr	r0, [r7, #8]
 8006ec8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eca:	bf00      	nop
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	4613      	mov	r3, r2
 8006ede:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	88fa      	ldrh	r2, [r7, #6]
 8006eea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	88fa      	ldrh	r2, [r7, #6]
 8006ef0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2222      	movs	r2, #34	; 0x22
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f16:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0220 	orr.w	r2, r2, #32
 8006f36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr

08006f44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2222      	movs	r2, #34	; 0x22
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	4a23      	ldr	r2, [pc, #140]	; (8007000 <UART_Start_Receive_DMA+0xbc>)
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	4a22      	ldr	r2, [pc, #136]	; (8007004 <UART_Start_Receive_DMA+0xc0>)
 8006f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	4a21      	ldr	r2, [pc, #132]	; (8007008 <UART_Start_Receive_DMA+0xc4>)
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	2200      	movs	r2, #0
 8006f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f8c:	f107 0308 	add.w	r3, r7, #8
 8006f90:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	88fb      	ldrh	r3, [r7, #6]
 8006fa4:	f7fb f856 	bl	8002054 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006fa8:	2300      	movs	r3, #0
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fd4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695a      	ldr	r2, [r3, #20]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0201 	orr.w	r2, r2, #1
 8006fe4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695a      	ldr	r2, [r3, #20]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ff4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	08006d69 	.word	0x08006d69
 8007004:	08006e03 	.word	0x08006e03
 8007008:	08006e3d 	.word	0x08006e3d

0800700c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007022:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800704c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	2b01      	cmp	r3, #1
 8007064:	d107      	bne.n	8007076 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0210 	bic.w	r2, r2, #16
 8007074:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr

0800708e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b21      	cmp	r3, #33	; 0x21
 80070ca:	d13e      	bne.n	800714a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d4:	d114      	bne.n	8007100 <UART_Transmit_IT+0x48>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d110      	bne.n	8007100 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	1c9a      	adds	r2, r3, #2
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	621a      	str	r2, [r3, #32]
 80070fe:	e008      	b.n	8007112 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	1c59      	adds	r1, r3, #1
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6211      	str	r1, [r2, #32]
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29b      	uxth	r3, r3
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	4619      	mov	r1, r3
 8007120:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10f      	bne.n	8007146 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007134:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007144:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e000      	b.n	800714c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800714a:	2302      	movs	r3, #2
  }
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr

08007156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800716c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b22      	cmp	r3, #34	; 0x22
 800719a:	f040 809b 	bne.w	80072d4 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a6:	d117      	bne.n	80071d8 <UART_Receive_IT+0x50>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d113      	bne.n	80071d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	1c9a      	adds	r2, r3, #2
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	629a      	str	r2, [r3, #40]	; 0x28
 80071d6:	e026      	b.n	8007226 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ea:	d007      	beq.n	80071fc <UART_Receive_IT+0x74>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <UART_Receive_IT+0x82>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	e008      	b.n	800721c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007216:	b2da      	uxtb	r2, r3
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29b      	uxth	r3, r3
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	4619      	mov	r1, r3
 8007234:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007236:	2b00      	cmp	r3, #0
 8007238:	d14a      	bne.n	80072d0 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0220 	bic.w	r2, r2, #32
 8007248:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007258:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695a      	ldr	r2, [r3, #20]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0201 	bic.w	r2, r2, #1
 8007268:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	2b01      	cmp	r3, #1
 8007278:	d124      	bne.n	80072c4 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0210 	bic.w	r2, r2, #16
 800728e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b10      	cmp	r3, #16
 800729c:	d10a      	bne.n	80072b4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80072bc:	4611      	mov	r1, r2
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
 80072c2:	e003      	b.n	80072cc <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	e002      	b.n	80072d6 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e000      	b.n	80072d6 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800731a:	f023 030c 	bic.w	r3, r3, #12
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	430b      	orrs	r3, r1
 8007326:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2c      	ldr	r2, [pc, #176]	; (80073f4 <UART_SetConfig+0x114>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d103      	bne.n	8007350 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007348:	f7fe fa20 	bl	800578c <HAL_RCC_GetPCLK2Freq>
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	e002      	b.n	8007356 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fe fa08 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8007354:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009a      	lsls	r2, r3, #2
 8007360:	441a      	add	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	4a22      	ldr	r2, [pc, #136]	; (80073f8 <UART_SetConfig+0x118>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	0119      	lsls	r1, r3, #4
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009a      	lsls	r2, r3, #2
 8007380:	441a      	add	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	fbb2 f2f3 	udiv	r2, r2, r3
 800738c:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <UART_SetConfig+0x118>)
 800738e:	fba3 0302 	umull	r0, r3, r3, r2
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	2064      	movs	r0, #100	; 0x64
 8007396:	fb00 f303 	mul.w	r3, r0, r3
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	3332      	adds	r3, #50	; 0x32
 80073a0:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <UART_SetConfig+0x118>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ac:	4419      	add	r1, r3
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009a      	lsls	r2, r3, #2
 80073b8:	441a      	add	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <UART_SetConfig+0x118>)
 80073c6:	fba3 0302 	umull	r0, r3, r3, r2
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	2064      	movs	r0, #100	; 0x64
 80073ce:	fb00 f303 	mul.w	r3, r0, r3
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	3332      	adds	r3, #50	; 0x32
 80073d8:	4a07      	ldr	r2, [pc, #28]	; (80073f8 <UART_SetConfig+0x118>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	f003 020f 	and.w	r2, r3, #15
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	440a      	add	r2, r1
 80073ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	40013800 	.word	0x40013800
 80073f8:	51eb851f 	.word	0x51eb851f

080073fc <__errno>:
 80073fc:	4b01      	ldr	r3, [pc, #4]	; (8007404 <__errno+0x8>)
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000018 	.word	0x20000018

08007408 <__libc_init_array>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	2600      	movs	r6, #0
 800740c:	4d0c      	ldr	r5, [pc, #48]	; (8007440 <__libc_init_array+0x38>)
 800740e:	4c0d      	ldr	r4, [pc, #52]	; (8007444 <__libc_init_array+0x3c>)
 8007410:	1b64      	subs	r4, r4, r5
 8007412:	10a4      	asrs	r4, r4, #2
 8007414:	42a6      	cmp	r6, r4
 8007416:	d109      	bne.n	800742c <__libc_init_array+0x24>
 8007418:	f000 fc9c 	bl	8007d54 <_init>
 800741c:	2600      	movs	r6, #0
 800741e:	4d0a      	ldr	r5, [pc, #40]	; (8007448 <__libc_init_array+0x40>)
 8007420:	4c0a      	ldr	r4, [pc, #40]	; (800744c <__libc_init_array+0x44>)
 8007422:	1b64      	subs	r4, r4, r5
 8007424:	10a4      	asrs	r4, r4, #2
 8007426:	42a6      	cmp	r6, r4
 8007428:	d105      	bne.n	8007436 <__libc_init_array+0x2e>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007430:	4798      	blx	r3
 8007432:	3601      	adds	r6, #1
 8007434:	e7ee      	b.n	8007414 <__libc_init_array+0xc>
 8007436:	f855 3b04 	ldr.w	r3, [r5], #4
 800743a:	4798      	blx	r3
 800743c:	3601      	adds	r6, #1
 800743e:	e7f2      	b.n	8007426 <__libc_init_array+0x1e>
 8007440:	080083d0 	.word	0x080083d0
 8007444:	080083d0 	.word	0x080083d0
 8007448:	080083d0 	.word	0x080083d0
 800744c:	080083d4 	.word	0x080083d4

08007450 <memset>:
 8007450:	4603      	mov	r3, r0
 8007452:	4402      	add	r2, r0
 8007454:	4293      	cmp	r3, r2
 8007456:	d100      	bne.n	800745a <memset+0xa>
 8007458:	4770      	bx	lr
 800745a:	f803 1b01 	strb.w	r1, [r3], #1
 800745e:	e7f9      	b.n	8007454 <memset+0x4>

08007460 <siprintf>:
 8007460:	b40e      	push	{r1, r2, r3}
 8007462:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007466:	b500      	push	{lr}
 8007468:	b09c      	sub	sp, #112	; 0x70
 800746a:	ab1d      	add	r3, sp, #116	; 0x74
 800746c:	9002      	str	r0, [sp, #8]
 800746e:	9006      	str	r0, [sp, #24]
 8007470:	9107      	str	r1, [sp, #28]
 8007472:	9104      	str	r1, [sp, #16]
 8007474:	4808      	ldr	r0, [pc, #32]	; (8007498 <siprintf+0x38>)
 8007476:	4909      	ldr	r1, [pc, #36]	; (800749c <siprintf+0x3c>)
 8007478:	f853 2b04 	ldr.w	r2, [r3], #4
 800747c:	9105      	str	r1, [sp, #20]
 800747e:	6800      	ldr	r0, [r0, #0]
 8007480:	a902      	add	r1, sp, #8
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	f000 f868 	bl	8007558 <_svfiprintf_r>
 8007488:	2200      	movs	r2, #0
 800748a:	9b02      	ldr	r3, [sp, #8]
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	b01c      	add	sp, #112	; 0x70
 8007490:	f85d eb04 	ldr.w	lr, [sp], #4
 8007494:	b003      	add	sp, #12
 8007496:	4770      	bx	lr
 8007498:	20000018 	.word	0x20000018
 800749c:	ffff0208 	.word	0xffff0208

080074a0 <__ssputs_r>:
 80074a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	688e      	ldr	r6, [r1, #8]
 80074a6:	4682      	mov	sl, r0
 80074a8:	429e      	cmp	r6, r3
 80074aa:	460c      	mov	r4, r1
 80074ac:	4690      	mov	r8, r2
 80074ae:	461f      	mov	r7, r3
 80074b0:	d838      	bhi.n	8007524 <__ssputs_r+0x84>
 80074b2:	898a      	ldrh	r2, [r1, #12]
 80074b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074b8:	d032      	beq.n	8007520 <__ssputs_r+0x80>
 80074ba:	6825      	ldr	r5, [r4, #0]
 80074bc:	6909      	ldr	r1, [r1, #16]
 80074be:	3301      	adds	r3, #1
 80074c0:	eba5 0901 	sub.w	r9, r5, r1
 80074c4:	6965      	ldr	r5, [r4, #20]
 80074c6:	444b      	add	r3, r9
 80074c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074d0:	106d      	asrs	r5, r5, #1
 80074d2:	429d      	cmp	r5, r3
 80074d4:	bf38      	it	cc
 80074d6:	461d      	movcc	r5, r3
 80074d8:	0553      	lsls	r3, r2, #21
 80074da:	d531      	bpl.n	8007540 <__ssputs_r+0xa0>
 80074dc:	4629      	mov	r1, r5
 80074de:	f000 fb6f 	bl	8007bc0 <_malloc_r>
 80074e2:	4606      	mov	r6, r0
 80074e4:	b950      	cbnz	r0, 80074fc <__ssputs_r+0x5c>
 80074e6:	230c      	movs	r3, #12
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	f8ca 3000 	str.w	r3, [sl]
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fc:	464a      	mov	r2, r9
 80074fe:	6921      	ldr	r1, [r4, #16]
 8007500:	f000 face 	bl	8007aa0 <memcpy>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800750a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	6126      	str	r6, [r4, #16]
 8007512:	444e      	add	r6, r9
 8007514:	6026      	str	r6, [r4, #0]
 8007516:	463e      	mov	r6, r7
 8007518:	6165      	str	r5, [r4, #20]
 800751a:	eba5 0509 	sub.w	r5, r5, r9
 800751e:	60a5      	str	r5, [r4, #8]
 8007520:	42be      	cmp	r6, r7
 8007522:	d900      	bls.n	8007526 <__ssputs_r+0x86>
 8007524:	463e      	mov	r6, r7
 8007526:	4632      	mov	r2, r6
 8007528:	4641      	mov	r1, r8
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	f000 fac6 	bl	8007abc <memmove>
 8007530:	68a3      	ldr	r3, [r4, #8]
 8007532:	2000      	movs	r0, #0
 8007534:	1b9b      	subs	r3, r3, r6
 8007536:	60a3      	str	r3, [r4, #8]
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	4433      	add	r3, r6
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	e7db      	b.n	80074f8 <__ssputs_r+0x58>
 8007540:	462a      	mov	r2, r5
 8007542:	f000 fbb1 	bl	8007ca8 <_realloc_r>
 8007546:	4606      	mov	r6, r0
 8007548:	2800      	cmp	r0, #0
 800754a:	d1e1      	bne.n	8007510 <__ssputs_r+0x70>
 800754c:	4650      	mov	r0, sl
 800754e:	6921      	ldr	r1, [r4, #16]
 8007550:	f000 face 	bl	8007af0 <_free_r>
 8007554:	e7c7      	b.n	80074e6 <__ssputs_r+0x46>
	...

08007558 <_svfiprintf_r>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	4698      	mov	r8, r3
 800755e:	898b      	ldrh	r3, [r1, #12]
 8007560:	4607      	mov	r7, r0
 8007562:	061b      	lsls	r3, r3, #24
 8007564:	460d      	mov	r5, r1
 8007566:	4614      	mov	r4, r2
 8007568:	b09d      	sub	sp, #116	; 0x74
 800756a:	d50e      	bpl.n	800758a <_svfiprintf_r+0x32>
 800756c:	690b      	ldr	r3, [r1, #16]
 800756e:	b963      	cbnz	r3, 800758a <_svfiprintf_r+0x32>
 8007570:	2140      	movs	r1, #64	; 0x40
 8007572:	f000 fb25 	bl	8007bc0 <_malloc_r>
 8007576:	6028      	str	r0, [r5, #0]
 8007578:	6128      	str	r0, [r5, #16]
 800757a:	b920      	cbnz	r0, 8007586 <_svfiprintf_r+0x2e>
 800757c:	230c      	movs	r3, #12
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	e0d1      	b.n	800772a <_svfiprintf_r+0x1d2>
 8007586:	2340      	movs	r3, #64	; 0x40
 8007588:	616b      	str	r3, [r5, #20]
 800758a:	2300      	movs	r3, #0
 800758c:	9309      	str	r3, [sp, #36]	; 0x24
 800758e:	2320      	movs	r3, #32
 8007590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007594:	2330      	movs	r3, #48	; 0x30
 8007596:	f04f 0901 	mov.w	r9, #1
 800759a:	f8cd 800c 	str.w	r8, [sp, #12]
 800759e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007744 <_svfiprintf_r+0x1ec>
 80075a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075a6:	4623      	mov	r3, r4
 80075a8:	469a      	mov	sl, r3
 80075aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ae:	b10a      	cbz	r2, 80075b4 <_svfiprintf_r+0x5c>
 80075b0:	2a25      	cmp	r2, #37	; 0x25
 80075b2:	d1f9      	bne.n	80075a8 <_svfiprintf_r+0x50>
 80075b4:	ebba 0b04 	subs.w	fp, sl, r4
 80075b8:	d00b      	beq.n	80075d2 <_svfiprintf_r+0x7a>
 80075ba:	465b      	mov	r3, fp
 80075bc:	4622      	mov	r2, r4
 80075be:	4629      	mov	r1, r5
 80075c0:	4638      	mov	r0, r7
 80075c2:	f7ff ff6d 	bl	80074a0 <__ssputs_r>
 80075c6:	3001      	adds	r0, #1
 80075c8:	f000 80aa 	beq.w	8007720 <_svfiprintf_r+0x1c8>
 80075cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ce:	445a      	add	r2, fp
 80075d0:	9209      	str	r2, [sp, #36]	; 0x24
 80075d2:	f89a 3000 	ldrb.w	r3, [sl]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80a2 	beq.w	8007720 <_svfiprintf_r+0x1c8>
 80075dc:	2300      	movs	r3, #0
 80075de:	f04f 32ff 	mov.w	r2, #4294967295
 80075e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e6:	f10a 0a01 	add.w	sl, sl, #1
 80075ea:	9304      	str	r3, [sp, #16]
 80075ec:	9307      	str	r3, [sp, #28]
 80075ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075f2:	931a      	str	r3, [sp, #104]	; 0x68
 80075f4:	4654      	mov	r4, sl
 80075f6:	2205      	movs	r2, #5
 80075f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fc:	4851      	ldr	r0, [pc, #324]	; (8007744 <_svfiprintf_r+0x1ec>)
 80075fe:	f000 fa41 	bl	8007a84 <memchr>
 8007602:	9a04      	ldr	r2, [sp, #16]
 8007604:	b9d8      	cbnz	r0, 800763e <_svfiprintf_r+0xe6>
 8007606:	06d0      	lsls	r0, r2, #27
 8007608:	bf44      	itt	mi
 800760a:	2320      	movmi	r3, #32
 800760c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007610:	0711      	lsls	r1, r2, #28
 8007612:	bf44      	itt	mi
 8007614:	232b      	movmi	r3, #43	; 0x2b
 8007616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761a:	f89a 3000 	ldrb.w	r3, [sl]
 800761e:	2b2a      	cmp	r3, #42	; 0x2a
 8007620:	d015      	beq.n	800764e <_svfiprintf_r+0xf6>
 8007622:	4654      	mov	r4, sl
 8007624:	2000      	movs	r0, #0
 8007626:	f04f 0c0a 	mov.w	ip, #10
 800762a:	9a07      	ldr	r2, [sp, #28]
 800762c:	4621      	mov	r1, r4
 800762e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007632:	3b30      	subs	r3, #48	; 0x30
 8007634:	2b09      	cmp	r3, #9
 8007636:	d94e      	bls.n	80076d6 <_svfiprintf_r+0x17e>
 8007638:	b1b0      	cbz	r0, 8007668 <_svfiprintf_r+0x110>
 800763a:	9207      	str	r2, [sp, #28]
 800763c:	e014      	b.n	8007668 <_svfiprintf_r+0x110>
 800763e:	eba0 0308 	sub.w	r3, r0, r8
 8007642:	fa09 f303 	lsl.w	r3, r9, r3
 8007646:	4313      	orrs	r3, r2
 8007648:	46a2      	mov	sl, r4
 800764a:	9304      	str	r3, [sp, #16]
 800764c:	e7d2      	b.n	80075f4 <_svfiprintf_r+0x9c>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	1d19      	adds	r1, r3, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	9103      	str	r1, [sp, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfbb      	ittet	lt
 800765a:	425b      	neglt	r3, r3
 800765c:	f042 0202 	orrlt.w	r2, r2, #2
 8007660:	9307      	strge	r3, [sp, #28]
 8007662:	9307      	strlt	r3, [sp, #28]
 8007664:	bfb8      	it	lt
 8007666:	9204      	strlt	r2, [sp, #16]
 8007668:	7823      	ldrb	r3, [r4, #0]
 800766a:	2b2e      	cmp	r3, #46	; 0x2e
 800766c:	d10c      	bne.n	8007688 <_svfiprintf_r+0x130>
 800766e:	7863      	ldrb	r3, [r4, #1]
 8007670:	2b2a      	cmp	r3, #42	; 0x2a
 8007672:	d135      	bne.n	80076e0 <_svfiprintf_r+0x188>
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	3402      	adds	r4, #2
 8007678:	1d1a      	adds	r2, r3, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	9203      	str	r2, [sp, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfb8      	it	lt
 8007682:	f04f 33ff 	movlt.w	r3, #4294967295
 8007686:	9305      	str	r3, [sp, #20]
 8007688:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007748 <_svfiprintf_r+0x1f0>
 800768c:	2203      	movs	r2, #3
 800768e:	4650      	mov	r0, sl
 8007690:	7821      	ldrb	r1, [r4, #0]
 8007692:	f000 f9f7 	bl	8007a84 <memchr>
 8007696:	b140      	cbz	r0, 80076aa <_svfiprintf_r+0x152>
 8007698:	2340      	movs	r3, #64	; 0x40
 800769a:	eba0 000a 	sub.w	r0, r0, sl
 800769e:	fa03 f000 	lsl.w	r0, r3, r0
 80076a2:	9b04      	ldr	r3, [sp, #16]
 80076a4:	3401      	adds	r4, #1
 80076a6:	4303      	orrs	r3, r0
 80076a8:	9304      	str	r3, [sp, #16]
 80076aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ae:	2206      	movs	r2, #6
 80076b0:	4826      	ldr	r0, [pc, #152]	; (800774c <_svfiprintf_r+0x1f4>)
 80076b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076b6:	f000 f9e5 	bl	8007a84 <memchr>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d038      	beq.n	8007730 <_svfiprintf_r+0x1d8>
 80076be:	4b24      	ldr	r3, [pc, #144]	; (8007750 <_svfiprintf_r+0x1f8>)
 80076c0:	bb1b      	cbnz	r3, 800770a <_svfiprintf_r+0x1b2>
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	3307      	adds	r3, #7
 80076c6:	f023 0307 	bic.w	r3, r3, #7
 80076ca:	3308      	adds	r3, #8
 80076cc:	9303      	str	r3, [sp, #12]
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	4433      	add	r3, r6
 80076d2:	9309      	str	r3, [sp, #36]	; 0x24
 80076d4:	e767      	b.n	80075a6 <_svfiprintf_r+0x4e>
 80076d6:	460c      	mov	r4, r1
 80076d8:	2001      	movs	r0, #1
 80076da:	fb0c 3202 	mla	r2, ip, r2, r3
 80076de:	e7a5      	b.n	800762c <_svfiprintf_r+0xd4>
 80076e0:	2300      	movs	r3, #0
 80076e2:	f04f 0c0a 	mov.w	ip, #10
 80076e6:	4619      	mov	r1, r3
 80076e8:	3401      	adds	r4, #1
 80076ea:	9305      	str	r3, [sp, #20]
 80076ec:	4620      	mov	r0, r4
 80076ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f2:	3a30      	subs	r2, #48	; 0x30
 80076f4:	2a09      	cmp	r2, #9
 80076f6:	d903      	bls.n	8007700 <_svfiprintf_r+0x1a8>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0c5      	beq.n	8007688 <_svfiprintf_r+0x130>
 80076fc:	9105      	str	r1, [sp, #20]
 80076fe:	e7c3      	b.n	8007688 <_svfiprintf_r+0x130>
 8007700:	4604      	mov	r4, r0
 8007702:	2301      	movs	r3, #1
 8007704:	fb0c 2101 	mla	r1, ip, r1, r2
 8007708:	e7f0      	b.n	80076ec <_svfiprintf_r+0x194>
 800770a:	ab03      	add	r3, sp, #12
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	462a      	mov	r2, r5
 8007710:	4638      	mov	r0, r7
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <_svfiprintf_r+0x1fc>)
 8007714:	a904      	add	r1, sp, #16
 8007716:	f3af 8000 	nop.w
 800771a:	1c42      	adds	r2, r0, #1
 800771c:	4606      	mov	r6, r0
 800771e:	d1d6      	bne.n	80076ce <_svfiprintf_r+0x176>
 8007720:	89ab      	ldrh	r3, [r5, #12]
 8007722:	065b      	lsls	r3, r3, #25
 8007724:	f53f af2c 	bmi.w	8007580 <_svfiprintf_r+0x28>
 8007728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800772a:	b01d      	add	sp, #116	; 0x74
 800772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	ab03      	add	r3, sp, #12
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	462a      	mov	r2, r5
 8007736:	4638      	mov	r0, r7
 8007738:	4b06      	ldr	r3, [pc, #24]	; (8007754 <_svfiprintf_r+0x1fc>)
 800773a:	a904      	add	r1, sp, #16
 800773c:	f000 f87c 	bl	8007838 <_printf_i>
 8007740:	e7eb      	b.n	800771a <_svfiprintf_r+0x1c2>
 8007742:	bf00      	nop
 8007744:	0800839c 	.word	0x0800839c
 8007748:	080083a2 	.word	0x080083a2
 800774c:	080083a6 	.word	0x080083a6
 8007750:	00000000 	.word	0x00000000
 8007754:	080074a1 	.word	0x080074a1

08007758 <_printf_common>:
 8007758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	4616      	mov	r6, r2
 800775e:	4699      	mov	r9, r3
 8007760:	688a      	ldr	r2, [r1, #8]
 8007762:	690b      	ldr	r3, [r1, #16]
 8007764:	4607      	mov	r7, r0
 8007766:	4293      	cmp	r3, r2
 8007768:	bfb8      	it	lt
 800776a:	4613      	movlt	r3, r2
 800776c:	6033      	str	r3, [r6, #0]
 800776e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007772:	460c      	mov	r4, r1
 8007774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007778:	b10a      	cbz	r2, 800777e <_printf_common+0x26>
 800777a:	3301      	adds	r3, #1
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	0699      	lsls	r1, r3, #26
 8007782:	bf42      	ittt	mi
 8007784:	6833      	ldrmi	r3, [r6, #0]
 8007786:	3302      	addmi	r3, #2
 8007788:	6033      	strmi	r3, [r6, #0]
 800778a:	6825      	ldr	r5, [r4, #0]
 800778c:	f015 0506 	ands.w	r5, r5, #6
 8007790:	d106      	bne.n	80077a0 <_printf_common+0x48>
 8007792:	f104 0a19 	add.w	sl, r4, #25
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	6832      	ldr	r2, [r6, #0]
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	42ab      	cmp	r3, r5
 800779e:	dc28      	bgt.n	80077f2 <_printf_common+0x9a>
 80077a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077a4:	1e13      	subs	r3, r2, #0
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	bf18      	it	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	0692      	lsls	r2, r2, #26
 80077ae:	d42d      	bmi.n	800780c <_printf_common+0xb4>
 80077b0:	4649      	mov	r1, r9
 80077b2:	4638      	mov	r0, r7
 80077b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077b8:	47c0      	blx	r8
 80077ba:	3001      	adds	r0, #1
 80077bc:	d020      	beq.n	8007800 <_printf_common+0xa8>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	68e5      	ldr	r5, [r4, #12]
 80077c2:	f003 0306 	and.w	r3, r3, #6
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	bf18      	it	ne
 80077ca:	2500      	movne	r5, #0
 80077cc:	6832      	ldr	r2, [r6, #0]
 80077ce:	f04f 0600 	mov.w	r6, #0
 80077d2:	68a3      	ldr	r3, [r4, #8]
 80077d4:	bf08      	it	eq
 80077d6:	1aad      	subeq	r5, r5, r2
 80077d8:	6922      	ldr	r2, [r4, #16]
 80077da:	bf08      	it	eq
 80077dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077e0:	4293      	cmp	r3, r2
 80077e2:	bfc4      	itt	gt
 80077e4:	1a9b      	subgt	r3, r3, r2
 80077e6:	18ed      	addgt	r5, r5, r3
 80077e8:	341a      	adds	r4, #26
 80077ea:	42b5      	cmp	r5, r6
 80077ec:	d11a      	bne.n	8007824 <_printf_common+0xcc>
 80077ee:	2000      	movs	r0, #0
 80077f0:	e008      	b.n	8007804 <_printf_common+0xac>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4652      	mov	r2, sl
 80077f6:	4649      	mov	r1, r9
 80077f8:	4638      	mov	r0, r7
 80077fa:	47c0      	blx	r8
 80077fc:	3001      	adds	r0, #1
 80077fe:	d103      	bne.n	8007808 <_printf_common+0xb0>
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	3501      	adds	r5, #1
 800780a:	e7c4      	b.n	8007796 <_printf_common+0x3e>
 800780c:	2030      	movs	r0, #48	; 0x30
 800780e:	18e1      	adds	r1, r4, r3
 8007810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800781a:	4422      	add	r2, r4
 800781c:	3302      	adds	r3, #2
 800781e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007822:	e7c5      	b.n	80077b0 <_printf_common+0x58>
 8007824:	2301      	movs	r3, #1
 8007826:	4622      	mov	r2, r4
 8007828:	4649      	mov	r1, r9
 800782a:	4638      	mov	r0, r7
 800782c:	47c0      	blx	r8
 800782e:	3001      	adds	r0, #1
 8007830:	d0e6      	beq.n	8007800 <_printf_common+0xa8>
 8007832:	3601      	adds	r6, #1
 8007834:	e7d9      	b.n	80077ea <_printf_common+0x92>
	...

08007838 <_printf_i>:
 8007838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	7e0f      	ldrb	r7, [r1, #24]
 800783e:	4691      	mov	r9, r2
 8007840:	2f78      	cmp	r7, #120	; 0x78
 8007842:	4680      	mov	r8, r0
 8007844:	460c      	mov	r4, r1
 8007846:	469a      	mov	sl, r3
 8007848:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800784a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800784e:	d807      	bhi.n	8007860 <_printf_i+0x28>
 8007850:	2f62      	cmp	r7, #98	; 0x62
 8007852:	d80a      	bhi.n	800786a <_printf_i+0x32>
 8007854:	2f00      	cmp	r7, #0
 8007856:	f000 80d9 	beq.w	8007a0c <_printf_i+0x1d4>
 800785a:	2f58      	cmp	r7, #88	; 0x58
 800785c:	f000 80a4 	beq.w	80079a8 <_printf_i+0x170>
 8007860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007868:	e03a      	b.n	80078e0 <_printf_i+0xa8>
 800786a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800786e:	2b15      	cmp	r3, #21
 8007870:	d8f6      	bhi.n	8007860 <_printf_i+0x28>
 8007872:	a101      	add	r1, pc, #4	; (adr r1, 8007878 <_printf_i+0x40>)
 8007874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007878:	080078d1 	.word	0x080078d1
 800787c:	080078e5 	.word	0x080078e5
 8007880:	08007861 	.word	0x08007861
 8007884:	08007861 	.word	0x08007861
 8007888:	08007861 	.word	0x08007861
 800788c:	08007861 	.word	0x08007861
 8007890:	080078e5 	.word	0x080078e5
 8007894:	08007861 	.word	0x08007861
 8007898:	08007861 	.word	0x08007861
 800789c:	08007861 	.word	0x08007861
 80078a0:	08007861 	.word	0x08007861
 80078a4:	080079f3 	.word	0x080079f3
 80078a8:	08007915 	.word	0x08007915
 80078ac:	080079d5 	.word	0x080079d5
 80078b0:	08007861 	.word	0x08007861
 80078b4:	08007861 	.word	0x08007861
 80078b8:	08007a15 	.word	0x08007a15
 80078bc:	08007861 	.word	0x08007861
 80078c0:	08007915 	.word	0x08007915
 80078c4:	08007861 	.word	0x08007861
 80078c8:	08007861 	.word	0x08007861
 80078cc:	080079dd 	.word	0x080079dd
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	602a      	str	r2, [r5, #0]
 80078d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0a4      	b.n	8007a2e <_printf_i+0x1f6>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	6829      	ldr	r1, [r5, #0]
 80078e8:	0606      	lsls	r6, r0, #24
 80078ea:	f101 0304 	add.w	r3, r1, #4
 80078ee:	d50a      	bpl.n	8007906 <_printf_i+0xce>
 80078f0:	680e      	ldr	r6, [r1, #0]
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	2e00      	cmp	r6, #0
 80078f6:	da03      	bge.n	8007900 <_printf_i+0xc8>
 80078f8:	232d      	movs	r3, #45	; 0x2d
 80078fa:	4276      	negs	r6, r6
 80078fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007900:	230a      	movs	r3, #10
 8007902:	485e      	ldr	r0, [pc, #376]	; (8007a7c <_printf_i+0x244>)
 8007904:	e019      	b.n	800793a <_printf_i+0x102>
 8007906:	680e      	ldr	r6, [r1, #0]
 8007908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	bf18      	it	ne
 8007910:	b236      	sxthne	r6, r6
 8007912:	e7ef      	b.n	80078f4 <_printf_i+0xbc>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	6820      	ldr	r0, [r4, #0]
 8007918:	1d19      	adds	r1, r3, #4
 800791a:	6029      	str	r1, [r5, #0]
 800791c:	0601      	lsls	r1, r0, #24
 800791e:	d501      	bpl.n	8007924 <_printf_i+0xec>
 8007920:	681e      	ldr	r6, [r3, #0]
 8007922:	e002      	b.n	800792a <_printf_i+0xf2>
 8007924:	0646      	lsls	r6, r0, #25
 8007926:	d5fb      	bpl.n	8007920 <_printf_i+0xe8>
 8007928:	881e      	ldrh	r6, [r3, #0]
 800792a:	2f6f      	cmp	r7, #111	; 0x6f
 800792c:	bf0c      	ite	eq
 800792e:	2308      	moveq	r3, #8
 8007930:	230a      	movne	r3, #10
 8007932:	4852      	ldr	r0, [pc, #328]	; (8007a7c <_printf_i+0x244>)
 8007934:	2100      	movs	r1, #0
 8007936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800793a:	6865      	ldr	r5, [r4, #4]
 800793c:	2d00      	cmp	r5, #0
 800793e:	bfa8      	it	ge
 8007940:	6821      	ldrge	r1, [r4, #0]
 8007942:	60a5      	str	r5, [r4, #8]
 8007944:	bfa4      	itt	ge
 8007946:	f021 0104 	bicge.w	r1, r1, #4
 800794a:	6021      	strge	r1, [r4, #0]
 800794c:	b90e      	cbnz	r6, 8007952 <_printf_i+0x11a>
 800794e:	2d00      	cmp	r5, #0
 8007950:	d04d      	beq.n	80079ee <_printf_i+0x1b6>
 8007952:	4615      	mov	r5, r2
 8007954:	fbb6 f1f3 	udiv	r1, r6, r3
 8007958:	fb03 6711 	mls	r7, r3, r1, r6
 800795c:	5dc7      	ldrb	r7, [r0, r7]
 800795e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007962:	4637      	mov	r7, r6
 8007964:	42bb      	cmp	r3, r7
 8007966:	460e      	mov	r6, r1
 8007968:	d9f4      	bls.n	8007954 <_printf_i+0x11c>
 800796a:	2b08      	cmp	r3, #8
 800796c:	d10b      	bne.n	8007986 <_printf_i+0x14e>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	07de      	lsls	r6, r3, #31
 8007972:	d508      	bpl.n	8007986 <_printf_i+0x14e>
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	6861      	ldr	r1, [r4, #4]
 8007978:	4299      	cmp	r1, r3
 800797a:	bfde      	ittt	le
 800797c:	2330      	movle	r3, #48	; 0x30
 800797e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007982:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007986:	1b52      	subs	r2, r2, r5
 8007988:	6122      	str	r2, [r4, #16]
 800798a:	464b      	mov	r3, r9
 800798c:	4621      	mov	r1, r4
 800798e:	4640      	mov	r0, r8
 8007990:	f8cd a000 	str.w	sl, [sp]
 8007994:	aa03      	add	r2, sp, #12
 8007996:	f7ff fedf 	bl	8007758 <_printf_common>
 800799a:	3001      	adds	r0, #1
 800799c:	d14c      	bne.n	8007a38 <_printf_i+0x200>
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
 80079a2:	b004      	add	sp, #16
 80079a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a8:	4834      	ldr	r0, [pc, #208]	; (8007a7c <_printf_i+0x244>)
 80079aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079ae:	6829      	ldr	r1, [r5, #0]
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80079b6:	6029      	str	r1, [r5, #0]
 80079b8:	061d      	lsls	r5, r3, #24
 80079ba:	d514      	bpl.n	80079e6 <_printf_i+0x1ae>
 80079bc:	07df      	lsls	r7, r3, #31
 80079be:	bf44      	itt	mi
 80079c0:	f043 0320 	orrmi.w	r3, r3, #32
 80079c4:	6023      	strmi	r3, [r4, #0]
 80079c6:	b91e      	cbnz	r6, 80079d0 <_printf_i+0x198>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	f023 0320 	bic.w	r3, r3, #32
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	2310      	movs	r3, #16
 80079d2:	e7af      	b.n	8007934 <_printf_i+0xfc>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	f043 0320 	orr.w	r3, r3, #32
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	2378      	movs	r3, #120	; 0x78
 80079de:	4828      	ldr	r0, [pc, #160]	; (8007a80 <_printf_i+0x248>)
 80079e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079e4:	e7e3      	b.n	80079ae <_printf_i+0x176>
 80079e6:	0659      	lsls	r1, r3, #25
 80079e8:	bf48      	it	mi
 80079ea:	b2b6      	uxthmi	r6, r6
 80079ec:	e7e6      	b.n	80079bc <_printf_i+0x184>
 80079ee:	4615      	mov	r5, r2
 80079f0:	e7bb      	b.n	800796a <_printf_i+0x132>
 80079f2:	682b      	ldr	r3, [r5, #0]
 80079f4:	6826      	ldr	r6, [r4, #0]
 80079f6:	1d18      	adds	r0, r3, #4
 80079f8:	6961      	ldr	r1, [r4, #20]
 80079fa:	6028      	str	r0, [r5, #0]
 80079fc:	0635      	lsls	r5, r6, #24
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	d501      	bpl.n	8007a06 <_printf_i+0x1ce>
 8007a02:	6019      	str	r1, [r3, #0]
 8007a04:	e002      	b.n	8007a0c <_printf_i+0x1d4>
 8007a06:	0670      	lsls	r0, r6, #25
 8007a08:	d5fb      	bpl.n	8007a02 <_printf_i+0x1ca>
 8007a0a:	8019      	strh	r1, [r3, #0]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4615      	mov	r5, r2
 8007a10:	6123      	str	r3, [r4, #16]
 8007a12:	e7ba      	b.n	800798a <_printf_i+0x152>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	2100      	movs	r1, #0
 8007a18:	1d1a      	adds	r2, r3, #4
 8007a1a:	602a      	str	r2, [r5, #0]
 8007a1c:	681d      	ldr	r5, [r3, #0]
 8007a1e:	6862      	ldr	r2, [r4, #4]
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f82f 	bl	8007a84 <memchr>
 8007a26:	b108      	cbz	r0, 8007a2c <_printf_i+0x1f4>
 8007a28:	1b40      	subs	r0, r0, r5
 8007a2a:	6060      	str	r0, [r4, #4]
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	6123      	str	r3, [r4, #16]
 8007a30:	2300      	movs	r3, #0
 8007a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a36:	e7a8      	b.n	800798a <_printf_i+0x152>
 8007a38:	462a      	mov	r2, r5
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	47d0      	blx	sl
 8007a42:	3001      	adds	r0, #1
 8007a44:	d0ab      	beq.n	800799e <_printf_i+0x166>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	079b      	lsls	r3, r3, #30
 8007a4a:	d413      	bmi.n	8007a74 <_printf_i+0x23c>
 8007a4c:	68e0      	ldr	r0, [r4, #12]
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	4298      	cmp	r0, r3
 8007a52:	bfb8      	it	lt
 8007a54:	4618      	movlt	r0, r3
 8007a56:	e7a4      	b.n	80079a2 <_printf_i+0x16a>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4632      	mov	r2, r6
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	4640      	mov	r0, r8
 8007a60:	47d0      	blx	sl
 8007a62:	3001      	adds	r0, #1
 8007a64:	d09b      	beq.n	800799e <_printf_i+0x166>
 8007a66:	3501      	adds	r5, #1
 8007a68:	68e3      	ldr	r3, [r4, #12]
 8007a6a:	9903      	ldr	r1, [sp, #12]
 8007a6c:	1a5b      	subs	r3, r3, r1
 8007a6e:	42ab      	cmp	r3, r5
 8007a70:	dcf2      	bgt.n	8007a58 <_printf_i+0x220>
 8007a72:	e7eb      	b.n	8007a4c <_printf_i+0x214>
 8007a74:	2500      	movs	r5, #0
 8007a76:	f104 0619 	add.w	r6, r4, #25
 8007a7a:	e7f5      	b.n	8007a68 <_printf_i+0x230>
 8007a7c:	080083ad 	.word	0x080083ad
 8007a80:	080083be 	.word	0x080083be

08007a84 <memchr>:
 8007a84:	4603      	mov	r3, r0
 8007a86:	b510      	push	{r4, lr}
 8007a88:	b2c9      	uxtb	r1, r1
 8007a8a:	4402      	add	r2, r0
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	d101      	bne.n	8007a96 <memchr+0x12>
 8007a92:	2000      	movs	r0, #0
 8007a94:	e003      	b.n	8007a9e <memchr+0x1a>
 8007a96:	7804      	ldrb	r4, [r0, #0]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	428c      	cmp	r4, r1
 8007a9c:	d1f6      	bne.n	8007a8c <memchr+0x8>
 8007a9e:	bd10      	pop	{r4, pc}

08007aa0 <memcpy>:
 8007aa0:	440a      	add	r2, r1
 8007aa2:	4291      	cmp	r1, r2
 8007aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aa8:	d100      	bne.n	8007aac <memcpy+0xc>
 8007aaa:	4770      	bx	lr
 8007aac:	b510      	push	{r4, lr}
 8007aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ab8:	d1f9      	bne.n	8007aae <memcpy+0xe>
 8007aba:	bd10      	pop	{r4, pc}

08007abc <memmove>:
 8007abc:	4288      	cmp	r0, r1
 8007abe:	b510      	push	{r4, lr}
 8007ac0:	eb01 0402 	add.w	r4, r1, r2
 8007ac4:	d902      	bls.n	8007acc <memmove+0x10>
 8007ac6:	4284      	cmp	r4, r0
 8007ac8:	4623      	mov	r3, r4
 8007aca:	d807      	bhi.n	8007adc <memmove+0x20>
 8007acc:	1e43      	subs	r3, r0, #1
 8007ace:	42a1      	cmp	r1, r4
 8007ad0:	d008      	beq.n	8007ae4 <memmove+0x28>
 8007ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ada:	e7f8      	b.n	8007ace <memmove+0x12>
 8007adc:	4601      	mov	r1, r0
 8007ade:	4402      	add	r2, r0
 8007ae0:	428a      	cmp	r2, r1
 8007ae2:	d100      	bne.n	8007ae6 <memmove+0x2a>
 8007ae4:	bd10      	pop	{r4, pc}
 8007ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aee:	e7f7      	b.n	8007ae0 <memmove+0x24>

08007af0 <_free_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4605      	mov	r5, r0
 8007af4:	2900      	cmp	r1, #0
 8007af6:	d040      	beq.n	8007b7a <_free_r+0x8a>
 8007af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007afc:	1f0c      	subs	r4, r1, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bfb8      	it	lt
 8007b02:	18e4      	addlt	r4, r4, r3
 8007b04:	f000 f910 	bl	8007d28 <__malloc_lock>
 8007b08:	4a1c      	ldr	r2, [pc, #112]	; (8007b7c <_free_r+0x8c>)
 8007b0a:	6813      	ldr	r3, [r2, #0]
 8007b0c:	b933      	cbnz	r3, 8007b1c <_free_r+0x2c>
 8007b0e:	6063      	str	r3, [r4, #4]
 8007b10:	6014      	str	r4, [r2, #0]
 8007b12:	4628      	mov	r0, r5
 8007b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b18:	f000 b90c 	b.w	8007d34 <__malloc_unlock>
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	d908      	bls.n	8007b32 <_free_r+0x42>
 8007b20:	6820      	ldr	r0, [r4, #0]
 8007b22:	1821      	adds	r1, r4, r0
 8007b24:	428b      	cmp	r3, r1
 8007b26:	bf01      	itttt	eq
 8007b28:	6819      	ldreq	r1, [r3, #0]
 8007b2a:	685b      	ldreq	r3, [r3, #4]
 8007b2c:	1809      	addeq	r1, r1, r0
 8007b2e:	6021      	streq	r1, [r4, #0]
 8007b30:	e7ed      	b.n	8007b0e <_free_r+0x1e>
 8007b32:	461a      	mov	r2, r3
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	b10b      	cbz	r3, 8007b3c <_free_r+0x4c>
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d9fa      	bls.n	8007b32 <_free_r+0x42>
 8007b3c:	6811      	ldr	r1, [r2, #0]
 8007b3e:	1850      	adds	r0, r2, r1
 8007b40:	42a0      	cmp	r0, r4
 8007b42:	d10b      	bne.n	8007b5c <_free_r+0x6c>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	4401      	add	r1, r0
 8007b48:	1850      	adds	r0, r2, r1
 8007b4a:	4283      	cmp	r3, r0
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	d1e0      	bne.n	8007b12 <_free_r+0x22>
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4401      	add	r1, r0
 8007b56:	6011      	str	r1, [r2, #0]
 8007b58:	6053      	str	r3, [r2, #4]
 8007b5a:	e7da      	b.n	8007b12 <_free_r+0x22>
 8007b5c:	d902      	bls.n	8007b64 <_free_r+0x74>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	e7d6      	b.n	8007b12 <_free_r+0x22>
 8007b64:	6820      	ldr	r0, [r4, #0]
 8007b66:	1821      	adds	r1, r4, r0
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf01      	itttt	eq
 8007b6c:	6819      	ldreq	r1, [r3, #0]
 8007b6e:	685b      	ldreq	r3, [r3, #4]
 8007b70:	1809      	addeq	r1, r1, r0
 8007b72:	6021      	streq	r1, [r4, #0]
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	6054      	str	r4, [r2, #4]
 8007b78:	e7cb      	b.n	8007b12 <_free_r+0x22>
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000558 	.word	0x20000558

08007b80 <sbrk_aligned>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4e0e      	ldr	r6, [pc, #56]	; (8007bbc <sbrk_aligned+0x3c>)
 8007b84:	460c      	mov	r4, r1
 8007b86:	6831      	ldr	r1, [r6, #0]
 8007b88:	4605      	mov	r5, r0
 8007b8a:	b911      	cbnz	r1, 8007b92 <sbrk_aligned+0x12>
 8007b8c:	f000 f8bc 	bl	8007d08 <_sbrk_r>
 8007b90:	6030      	str	r0, [r6, #0]
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 f8b7 	bl	8007d08 <_sbrk_r>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	d00a      	beq.n	8007bb4 <sbrk_aligned+0x34>
 8007b9e:	1cc4      	adds	r4, r0, #3
 8007ba0:	f024 0403 	bic.w	r4, r4, #3
 8007ba4:	42a0      	cmp	r0, r4
 8007ba6:	d007      	beq.n	8007bb8 <sbrk_aligned+0x38>
 8007ba8:	1a21      	subs	r1, r4, r0
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 f8ac 	bl	8007d08 <_sbrk_r>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d101      	bne.n	8007bb8 <sbrk_aligned+0x38>
 8007bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	2000055c 	.word	0x2000055c

08007bc0 <_malloc_r>:
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	1ccd      	adds	r5, r1, #3
 8007bc6:	f025 0503 	bic.w	r5, r5, #3
 8007bca:	3508      	adds	r5, #8
 8007bcc:	2d0c      	cmp	r5, #12
 8007bce:	bf38      	it	cc
 8007bd0:	250c      	movcc	r5, #12
 8007bd2:	2d00      	cmp	r5, #0
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	db01      	blt.n	8007bdc <_malloc_r+0x1c>
 8007bd8:	42a9      	cmp	r1, r5
 8007bda:	d905      	bls.n	8007be8 <_malloc_r+0x28>
 8007bdc:	230c      	movs	r3, #12
 8007bde:	2600      	movs	r6, #0
 8007be0:	603b      	str	r3, [r7, #0]
 8007be2:	4630      	mov	r0, r6
 8007be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be8:	4e2e      	ldr	r6, [pc, #184]	; (8007ca4 <_malloc_r+0xe4>)
 8007bea:	f000 f89d 	bl	8007d28 <__malloc_lock>
 8007bee:	6833      	ldr	r3, [r6, #0]
 8007bf0:	461c      	mov	r4, r3
 8007bf2:	bb34      	cbnz	r4, 8007c42 <_malloc_r+0x82>
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f7ff ffc2 	bl	8007b80 <sbrk_aligned>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	4604      	mov	r4, r0
 8007c00:	d14d      	bne.n	8007c9e <_malloc_r+0xde>
 8007c02:	6834      	ldr	r4, [r6, #0]
 8007c04:	4626      	mov	r6, r4
 8007c06:	2e00      	cmp	r6, #0
 8007c08:	d140      	bne.n	8007c8c <_malloc_r+0xcc>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4638      	mov	r0, r7
 8007c10:	eb04 0803 	add.w	r8, r4, r3
 8007c14:	f000 f878 	bl	8007d08 <_sbrk_r>
 8007c18:	4580      	cmp	r8, r0
 8007c1a:	d13a      	bne.n	8007c92 <_malloc_r+0xd2>
 8007c1c:	6821      	ldr	r1, [r4, #0]
 8007c1e:	3503      	adds	r5, #3
 8007c20:	1a6d      	subs	r5, r5, r1
 8007c22:	f025 0503 	bic.w	r5, r5, #3
 8007c26:	3508      	adds	r5, #8
 8007c28:	2d0c      	cmp	r5, #12
 8007c2a:	bf38      	it	cc
 8007c2c:	250c      	movcc	r5, #12
 8007c2e:	4638      	mov	r0, r7
 8007c30:	4629      	mov	r1, r5
 8007c32:	f7ff ffa5 	bl	8007b80 <sbrk_aligned>
 8007c36:	3001      	adds	r0, #1
 8007c38:	d02b      	beq.n	8007c92 <_malloc_r+0xd2>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	442b      	add	r3, r5
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	e00e      	b.n	8007c60 <_malloc_r+0xa0>
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	1b52      	subs	r2, r2, r5
 8007c46:	d41e      	bmi.n	8007c86 <_malloc_r+0xc6>
 8007c48:	2a0b      	cmp	r2, #11
 8007c4a:	d916      	bls.n	8007c7a <_malloc_r+0xba>
 8007c4c:	1961      	adds	r1, r4, r5
 8007c4e:	42a3      	cmp	r3, r4
 8007c50:	6025      	str	r5, [r4, #0]
 8007c52:	bf18      	it	ne
 8007c54:	6059      	strne	r1, [r3, #4]
 8007c56:	6863      	ldr	r3, [r4, #4]
 8007c58:	bf08      	it	eq
 8007c5a:	6031      	streq	r1, [r6, #0]
 8007c5c:	5162      	str	r2, [r4, r5]
 8007c5e:	604b      	str	r3, [r1, #4]
 8007c60:	4638      	mov	r0, r7
 8007c62:	f104 060b 	add.w	r6, r4, #11
 8007c66:	f000 f865 	bl	8007d34 <__malloc_unlock>
 8007c6a:	f026 0607 	bic.w	r6, r6, #7
 8007c6e:	1d23      	adds	r3, r4, #4
 8007c70:	1af2      	subs	r2, r6, r3
 8007c72:	d0b6      	beq.n	8007be2 <_malloc_r+0x22>
 8007c74:	1b9b      	subs	r3, r3, r6
 8007c76:	50a3      	str	r3, [r4, r2]
 8007c78:	e7b3      	b.n	8007be2 <_malloc_r+0x22>
 8007c7a:	6862      	ldr	r2, [r4, #4]
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	bf0c      	ite	eq
 8007c80:	6032      	streq	r2, [r6, #0]
 8007c82:	605a      	strne	r2, [r3, #4]
 8007c84:	e7ec      	b.n	8007c60 <_malloc_r+0xa0>
 8007c86:	4623      	mov	r3, r4
 8007c88:	6864      	ldr	r4, [r4, #4]
 8007c8a:	e7b2      	b.n	8007bf2 <_malloc_r+0x32>
 8007c8c:	4634      	mov	r4, r6
 8007c8e:	6876      	ldr	r6, [r6, #4]
 8007c90:	e7b9      	b.n	8007c06 <_malloc_r+0x46>
 8007c92:	230c      	movs	r3, #12
 8007c94:	4638      	mov	r0, r7
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	f000 f84c 	bl	8007d34 <__malloc_unlock>
 8007c9c:	e7a1      	b.n	8007be2 <_malloc_r+0x22>
 8007c9e:	6025      	str	r5, [r4, #0]
 8007ca0:	e7de      	b.n	8007c60 <_malloc_r+0xa0>
 8007ca2:	bf00      	nop
 8007ca4:	20000558 	.word	0x20000558

08007ca8 <_realloc_r>:
 8007ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	4680      	mov	r8, r0
 8007cae:	4614      	mov	r4, r2
 8007cb0:	460e      	mov	r6, r1
 8007cb2:	b921      	cbnz	r1, 8007cbe <_realloc_r+0x16>
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cba:	f7ff bf81 	b.w	8007bc0 <_malloc_r>
 8007cbe:	b92a      	cbnz	r2, 8007ccc <_realloc_r+0x24>
 8007cc0:	f7ff ff16 	bl	8007af0 <_free_r>
 8007cc4:	4625      	mov	r5, r4
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ccc:	f000 f838 	bl	8007d40 <_malloc_usable_size_r>
 8007cd0:	4284      	cmp	r4, r0
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	d802      	bhi.n	8007cdc <_realloc_r+0x34>
 8007cd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cda:	d812      	bhi.n	8007d02 <_realloc_r+0x5a>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4640      	mov	r0, r8
 8007ce0:	f7ff ff6e 	bl	8007bc0 <_malloc_r>
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0ed      	beq.n	8007cc6 <_realloc_r+0x1e>
 8007cea:	42bc      	cmp	r4, r7
 8007cec:	4622      	mov	r2, r4
 8007cee:	4631      	mov	r1, r6
 8007cf0:	bf28      	it	cs
 8007cf2:	463a      	movcs	r2, r7
 8007cf4:	f7ff fed4 	bl	8007aa0 <memcpy>
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	f7ff fef8 	bl	8007af0 <_free_r>
 8007d00:	e7e1      	b.n	8007cc6 <_realloc_r+0x1e>
 8007d02:	4635      	mov	r5, r6
 8007d04:	e7df      	b.n	8007cc6 <_realloc_r+0x1e>
	...

08007d08 <_sbrk_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4d05      	ldr	r5, [pc, #20]	; (8007d24 <_sbrk_r+0x1c>)
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	602b      	str	r3, [r5, #0]
 8007d14:	f7f9 faf4 	bl	8001300 <_sbrk>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_sbrk_r+0x1a>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_sbrk_r+0x1a>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	20000560 	.word	0x20000560

08007d28 <__malloc_lock>:
 8007d28:	4801      	ldr	r0, [pc, #4]	; (8007d30 <__malloc_lock+0x8>)
 8007d2a:	f000 b811 	b.w	8007d50 <__retarget_lock_acquire_recursive>
 8007d2e:	bf00      	nop
 8007d30:	20000564 	.word	0x20000564

08007d34 <__malloc_unlock>:
 8007d34:	4801      	ldr	r0, [pc, #4]	; (8007d3c <__malloc_unlock+0x8>)
 8007d36:	f000 b80c 	b.w	8007d52 <__retarget_lock_release_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	20000564 	.word	0x20000564

08007d40 <_malloc_usable_size_r>:
 8007d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d44:	1f18      	subs	r0, r3, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bfbc      	itt	lt
 8007d4a:	580b      	ldrlt	r3, [r1, r0]
 8007d4c:	18c0      	addlt	r0, r0, r3
 8007d4e:	4770      	bx	lr

08007d50 <__retarget_lock_acquire_recursive>:
 8007d50:	4770      	bx	lr

08007d52 <__retarget_lock_release_recursive>:
 8007d52:	4770      	bx	lr

08007d54 <_init>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr

08007d60 <_fini>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr
